include/linux/types.h
include/linux/kernel.h
include/linux/init.h
include/linux/spinlock.h
include/linux/smp.h
include/linux/rcupdate_wait.h
include/linux/interrupt.h
include/linux/sched.h
include/linux/sched/debug.h
include/linux/nmi.h
include/linux/atomic.h
include/linux/bitops.h
include/linux/export.h
include/linux/completion.h
include/linux/moduleparam.h
include/linux/percpu.h
include/linux/notifier.h
include/linux/cpu.h
include/linux/mutex.h
include/linux/time.h
include/linux/kernel_stat.h
include/linux/wait.h
include/linux/kthread.h
include/uapi/linux/sched/types.h
include/linux/prefetch.h
include/linux/delay.h
include/linux/stop_machine.h
include/linux/random.h
include/linux/trace_events.h
include/linux/suspend.h
include/linux/ftrace.h
?/tree.h
?/rcu.h
RCU_STATE_INITIALIZER(rcu_sched, 's', call_rcu_sched); 
RCU_STATE_INITIALIZER(rcu_bh, 'b', call_rcu_bh); 
static struct rcu_state *const rcu_state_p; 
LIST_HEAD(rcu_struct_flavors); 
static bool dump_tree; 
module_param(dump_tree, bool, 0444); 
static bool rcu_fanout_exact; 
module_param(rcu_fanout_exact, bool, 0444); 
static int rcu_fanout_leaf = RCU_FANOUT_LEAF; 
module_param(rcu_fanout_leaf, int, 0444); 
int rcu_num_lvls __read_mostly = RCU_NUM_LVLS; 
int num_rcu_lvl[] = NUM_RCU_LVL_INIT; 
int rcu_num_nodes __read_mostly = NUM_RCU_NODES; 
int sysctl_panic_on_rcu_stall __read_mostly; 
int rcu_scheduler_active __read_mostly; 
EXPORT_SYMBOL_GPL(rcu_scheduler_active); 
static int rcu_scheduler_fully_active __read_mostly; 
static void rcu_init_new_rnp(struct rcu_node *rnp_leaf); 
static void rcu_cleanup_dead_rnp(struct rcu_node *rnp_leaf); 
static void rcu_boost_kthread_setaffinity(struct rcu_node *rnp, int outgoingcpu); 
static void invoke_rcu_core(void); 
static void invoke_rcu_callbacks(struct rcu_state *rsp, struct rcu_data *rdp); 
static void rcu_report_exp_rdp(struct rcu_state *rsp, struct rcu_data *rdp, bool wake); 
static void sync_sched_exp_online_cleanup(int cpu); 
static int kthread_prio = IS_ENABLED(CONFIG_RCU_BOOST) ? 1 : 0; 
module_param(kthread_prio, int, 0644); 
static int gp_preinit_delay; 
module_param(gp_preinit_delay, int, 0444); 
static int gp_init_delay; 
module_param(gp_init_delay, int, 0444); 
static int gp_cleanup_delay; 
module_param(gp_cleanup_delay, int, 0444); 
unsigned long rcutorture_testseq; 
unsigned long rcutorture_vernum; 
unsigned long rcu_rnp_online_cpus(struct rcu_node *rnp) 
static int rcu_gp_in_progress(struct rcu_state *rsp) 
void rcu_sched_qs(void) 
void rcu_bh_qs(void) 
static DEFINE_PER_CPU(struct rcu_dynticks, rcu_dynticks) = { 
.dynticks_nesting = 1, .dynticks_nmi_nesting = DYNTICK_IRQ_NONIDLE, .dynticks = ATOMIC_INIT(RCU_DYNTICK_CTRL_CTR), }; 
static void rcu_dynticks_eqs_enter(void) 
static void rcu_dynticks_eqs_exit(void) 
static void rcu_dynticks_eqs_online(void) 
bool rcu_dynticks_curr_cpu_in_eqs(void) 
int rcu_dynticks_snap(struct rcu_dynticks *rdtp) 
static bool rcu_dynticks_in_eqs(int snap) 
static bool rcu_dynticks_in_eqs_since(struct rcu_dynticks *rdtp, int snap) 
static void rcu_dynticks_momentary_idle(void) 
bool rcu_eqs_special_set(int cpu) 
static void rcu_momentary_dyntick_idle(void) 
void rcu_note_context_switch(bool preempt) 
EXPORT_SYMBOL_GPL(rcu_note_context_switch); 
void rcu_all_qs(void) 
EXPORT_SYMBOL_GPL(rcu_all_qs); 
static long blimit = DEFAULT_RCU_BLIMIT; 
static long qhimark = DEFAULT_RCU_QHIMARK; 
static long qlowmark = DEFAULT_RCU_QLOMARK; 
module_param(blimit, long, 0444); 
module_param(qhimark, long, 0444); 
module_param(qlowmark, long, 0444); 
static ulong jiffies_till_first_fqs = ULONG_MAX; 
static ulong jiffies_till_next_fqs = ULONG_MAX; 
static bool rcu_kick_kthreads; 
module_param(jiffies_till_first_fqs, ulong, 0644); 
module_param(jiffies_till_next_fqs, ulong, 0644); 
module_param(rcu_kick_kthreads, bool, 0644); 
static ulong jiffies_till_sched_qs = HZ / 10; 
module_param(jiffies_till_sched_qs, ulong, 0444); 
static void force_qs_rnp(struct rcu_state *rsp, int (*f)(struct rcu_data *rsp)); 
static void force_quiescent_state(struct rcu_state *rsp); 
static int rcu_pending(void); 
unsigned long rcu_batches_started(void) 
EXPORT_SYMBOL_GPL(rcu_batches_started); 
unsigned long rcu_batches_started_sched(void) 
EXPORT_SYMBOL_GPL(rcu_batches_started_sched); 
unsigned long rcu_batches_started_bh(void) 
EXPORT_SYMBOL_GPL(rcu_batches_started_bh); 
unsigned long rcu_batches_completed(void) 
EXPORT_SYMBOL_GPL(rcu_batches_completed); 
unsigned long rcu_batches_completed_sched(void) 
EXPORT_SYMBOL_GPL(rcu_batches_completed_sched); 
unsigned long rcu_batches_completed_bh(void) 
EXPORT_SYMBOL_GPL(rcu_batches_completed_bh); 
unsigned long rcu_exp_batches_completed(void) 
EXPORT_SYMBOL_GPL(rcu_exp_batches_completed); 
unsigned long rcu_exp_batches_completed_sched(void) 
EXPORT_SYMBOL_GPL(rcu_exp_batches_completed_sched); 
void rcu_force_quiescent_state(void) 
EXPORT_SYMBOL_GPL(rcu_force_quiescent_state); 
void rcu_bh_force_quiescent_state(void) 
EXPORT_SYMBOL_GPL(rcu_bh_force_quiescent_state); 
void rcu_sched_force_quiescent_state(void) 
EXPORT_SYMBOL_GPL(rcu_sched_force_quiescent_state); 
void show_rcu_gp_kthreads(void) 
EXPORT_SYMBOL_GPL(show_rcu_gp_kthreads); 
void rcutorture_record_test_transition(void) 
EXPORT_SYMBOL_GPL(rcutorture_record_test_transition); 
void rcutorture_get_gp_data(enum rcutorture_type test_type, int *flags, unsigned long *gpnum, unsigned long *completed) 
EXPORT_SYMBOL_GPL(rcutorture_get_gp_data); 
void rcutorture_record_progress(unsigned long vernum) 
EXPORT_SYMBOL_GPL(rcutorture_record_progress); 
static struct rcu_node *rcu_get_root(struct rcu_state *rsp) 
static void rcu_eqs_enter(bool user) 
void rcu_idle_enter(void) 
void rcu_nmi_exit(void) 
void rcu_irq_exit(void) 
void rcu_irq_exit_irqson(void) 
static void rcu_eqs_exit(bool user) 
void rcu_idle_exit(void) 
void rcu_nmi_enter(void) 
void rcu_irq_enter(void) 
void rcu_irq_enter_irqson(void) 
bool notrace rcu_is_watching(void) 
EXPORT_SYMBOL_GPL(rcu_is_watching); 
void rcu_request_urgent_qs_task(struct task_struct *t) 
static int rcu_is_cpu_rrupt_from_idle(void) 
static void rcu_gpnum_ovf(struct rcu_node *rnp, struct rcu_data *rdp) 
static int dyntick_save_progress_counter(struct rcu_data *rdp) 
static void rcu_iw_handler(struct irq_work *iwp) 
static int rcu_implicit_dynticks_qs(struct rcu_data *rdp) 
static void record_gp_stall_check_time(struct rcu_state *rsp) 
static const char *gp_state_getname(short gs) 
static void rcu_check_gp_kthread_starvation(struct rcu_state *rsp) 
static void rcu_dump_cpu_stacks(struct rcu_state *rsp) 
static void rcu_stall_kick_kthreads(struct rcu_state *rsp) 
static inline void panic_on_rcu_stall(void) 
static void print_other_cpu_stall(struct rcu_state *rsp, unsigned long gpnum) 
static void print_cpu_stall(struct rcu_state *rsp) 
static void check_cpu_stall(struct rcu_state *rsp, struct rcu_data *rdp) 
void rcu_cpu_stall_reset(void) 
static unsigned long rcu_cbs_completed(struct rcu_state *rsp, struct rcu_node *rnp) 
static void trace_rcu_this_gp(struct rcu_node *rnp, struct rcu_data *rdp, unsigned long c, const char *s) 
static bool rcu_start_this_gp(struct rcu_node *rnp, struct rcu_data *rdp, unsigned long c) 
static bool rcu_future_gp_cleanup(struct rcu_state *rsp, struct rcu_node *rnp) 
static void rcu_gp_kthread_wake(struct rcu_state *rsp) 
static bool rcu_accelerate_cbs(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp) 
static bool rcu_advance_cbs(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp) 
static bool __note_gp_changes(struct rcu_state *rsp, struct rcu_node *rnp, struct rcu_data *rdp) 
static void note_gp_changes(struct rcu_state *rsp, struct rcu_data *rdp) 
static void rcu_gp_slow(struct rcu_state *rsp, int delay) 
static bool rcu_gp_init(struct rcu_state *rsp) 
static bool rcu_gp_fqs_check_wake(struct rcu_state *rsp, int *gfp) 
static void rcu_gp_fqs(struct rcu_state *rsp, bool first_time) 
static void rcu_gp_cleanup(struct rcu_state *rsp) 
static int __noreturn rcu_gp_kthread(void *arg) 
static void rcu_report_qs_rsp(struct rcu_state *rsp, unsigned long flags) 
__releases(rcu_get_root(rsp)->lock) 
static void rcu_report_qs_rnp(unsigned long mask, struct rcu_state *rsp, struct rcu_node *rnp, unsigned long gps, unsigned long flags) 
__releases(rnp->lock) 
static void rcu_report_unblock_qs_rnp(struct rcu_state *rsp, struct rcu_node *rnp, unsigned long flags) 
__releases(rnp->lock) 
static void rcu_report_qs_rdp(int cpu, struct rcu_state *rsp, struct rcu_data *rdp) 
static void rcu_check_quiescent_state(struct rcu_state *rsp, struct rcu_data *rdp) 
static void rcu_cleanup_dying_cpu(struct rcu_state *rsp) 
static void rcu_cleanup_dead_rnp(struct rcu_node *rnp_leaf) 
static void rcu_cleanup_dead_cpu(int cpu, struct rcu_state *rsp) 
static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp) 
void rcu_check_callbacks(int user) 
static void force_qs_rnp(struct rcu_state *rsp, int (*f)(struct rcu_data *rsp)) 
static void force_quiescent_state(struct rcu_state *rsp) 
static void __rcu_process_callbacks(struct rcu_state *rsp) 
static __latent_entropy void rcu_process_callbacks(struct softirq_action *unused) 
static void invoke_rcu_callbacks(struct rcu_state *rsp, struct rcu_data *rdp) 
static void invoke_rcu_core(void) 
static void __call_rcu_core(struct rcu_state *rsp, struct rcu_data *rdp, struct rcu_head *head, unsigned long flags) 
static void rcu_leak_callback(struct rcu_head *rhp) 
static void __call_rcu(struct rcu_head *head, rcu_callback_t func, struct rcu_state *rsp, int cpu, bool lazy) 
void call_rcu_sched(struct rcu_head *head, rcu_callback_t func) 
EXPORT_SYMBOL_GPL(call_rcu_sched); 
void call_rcu_bh(struct rcu_head *head, rcu_callback_t func) 
EXPORT_SYMBOL_GPL(call_rcu_bh); 
void kfree_call_rcu(struct rcu_head *head, rcu_callback_t func) 
EXPORT_SYMBOL_GPL(kfree_call_rcu); 
static inline int rcu_blocking_is_gp(void) 
void synchronize_sched(void) 
EXPORT_SYMBOL_GPL(synchronize_sched); 
void synchronize_rcu_bh(void) 
EXPORT_SYMBOL_GPL(synchronize_rcu_bh); 
unsigned long get_state_synchronize_rcu(void) 
EXPORT_SYMBOL_GPL(get_state_synchronize_rcu); 
void cond_synchronize_rcu(unsigned long oldstate) 
EXPORT_SYMBOL_GPL(cond_synchronize_rcu); 
unsigned long get_state_synchronize_sched(void) 
EXPORT_SYMBOL_GPL(get_state_synchronize_sched); 
void cond_synchronize_sched(unsigned long oldstate) 
EXPORT_SYMBOL_GPL(cond_synchronize_sched); 
static int __rcu_pending(struct rcu_state *rsp, struct rcu_data *rdp) 
static int rcu_pending(void) 
static bool __maybe_unused rcu_cpu_has_callbacks(bool *all_lazy) 
static void _rcu_barrier_trace(struct rcu_state *rsp, const char *s, int cpu, unsigned long done) 
static void rcu_barrier_callback(struct rcu_head *rhp) 
static void rcu_barrier_func(void *type) 
static void _rcu_barrier(struct rcu_state *rsp) 
void rcu_barrier_bh(void) 
EXPORT_SYMBOL_GPL(rcu_barrier_bh); 
void rcu_barrier_sched(void) 
EXPORT_SYMBOL_GPL(rcu_barrier_sched); 
static void rcu_init_new_rnp(struct rcu_node *rnp_leaf) 
static void __init rcu_boot_init_percpu_data(int cpu, struct rcu_state *rsp) 
static void rcu_init_percpu_data(int cpu, struct rcu_state *rsp) 
int rcutree_prepare_cpu(unsigned int cpu) 
static void rcutree_affinity_setting(unsigned int cpu, int outgoing) 
int rcutree_online_cpu(unsigned int cpu) 
int rcutree_offline_cpu(unsigned int cpu) 
int rcutree_dying_cpu(unsigned int cpu) 
int rcutree_dead_cpu(unsigned int cpu) 
static DEFINE_PER_CPU(int, rcu_cpu_started); 
void rcu_cpu_starting(unsigned int cpu) 
static int rcu_pm_notify(struct notifier_block *self, unsigned long action, void *hcpu) 
static int __init rcu_spawn_gp_kthread(void) 
early_initcall(rcu_spawn_gp_kthread); 
void rcu_scheduler_starting(void) 
static void __init rcu_init_one(struct rcu_state *rsp) 
static void __init rcu_init_geometry(void) 
static void __init rcu_dump_rcu_node_tree(struct rcu_state *rsp) 
struct workqueue_struct *rcu_gp_wq; 
struct workqueue_struct *rcu_par_gp_wq; 
void __init rcu_init(void) 
?/tree_exp.h
?/tree_plugin.h
