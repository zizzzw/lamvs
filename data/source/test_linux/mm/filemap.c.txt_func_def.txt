static int page_cache_tree_insert(struct address_space *mapping, struct page *page, void **shadowp) 
static void page_cache_tree_delete(struct address_space *mapping, struct page *page, void *shadow) 
static void unaccount_page_cache_page(struct address_space *mapping, struct page *page) 
void __delete_from_page_cache(struct page *page, void *shadow) 
static void page_cache_free_page(struct address_space *mapping, struct page *page) 
void delete_from_page_cache(struct page *page) 
static void page_cache_tree_delete_batch(struct address_space *mapping, struct pagevec *pvec) 
void delete_from_page_cache_batch(struct address_space *mapping, struct pagevec *pvec) 
int filemap_check_errors(struct address_space *mapping) 
static int filemap_check_and_keep_errors(struct address_space *mapping) 
int __filemap_fdatawrite_range(struct address_space *mapping, loff_t start, loff_t end, int sync_mode) 
static inline int __filemap_fdatawrite(struct address_space *mapping, int sync_mode) 
int filemap_fdatawrite(struct address_space *mapping) 
int filemap_fdatawrite_range(struct address_space *mapping, loff_t start, loff_t end) 
int filemap_flush(struct address_space *mapping) 
bool filemap_range_has_page(struct address_space *mapping, loff_t start_byte, loff_t end_byte) 
static void __filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte, loff_t end_byte) 
int filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte, loff_t end_byte) 
int file_fdatawait_range(struct file *file, loff_t start_byte, loff_t end_byte) 
int filemap_fdatawait_keep_errors(struct address_space *mapping) 
static bool mapping_needs_writeback(struct address_space *mapping) 
int filemap_write_and_wait(struct address_space *mapping) 
int filemap_write_and_wait_range(struct address_space *mapping, loff_t lstart, loff_t lend) 
void __filemap_set_wb_err(struct address_space *mapping, int err) 
int file_check_and_advance_wb_err(struct file *file) 
int file_write_and_wait_range(struct file *file, loff_t lstart, loff_t lend) 
int replace_page_cache_page(struct page *old, struct page *new, gfp_t gfp_mask) 
static int __add_to_page_cache_locked(struct page *page, struct address_space *mapping, pgoff_t offset, gfp_t gfp_mask, void **shadowp) 
int add_to_page_cache_locked(struct page *page, struct address_space *mapping, pgoff_t offset, gfp_t gfp_mask) 
int add_to_page_cache_lru(struct page *page, struct address_space *mapping, pgoff_t offset, gfp_t gfp_mask) 
static wait_queue_head_t *page_waitqueue(struct page *page) 
void __init pagecache_init(void) 
static int wake_page_function(wait_queue_entry_t *wait, unsigned mode, int sync, void *arg) 
static void wake_up_page_bit(struct page *page, int bit_nr) 
static void wake_up_page(struct page *page, int bit) 
static inline int wait_on_page_bit_common(wait_queue_head_t *q, struct page *page, int bit_nr, int state, bool lock) 
void wait_on_page_bit(struct page *page, int bit_nr) 
int wait_on_page_bit_killable(struct page *page, int bit_nr) 
void add_page_wait_queue(struct page *page, wait_queue_entry_t *waiter) 
void unlock_page(struct page *page) 
void end_page_writeback(struct page *page) 
void page_endio(struct page *page, bool is_write, int err) 
void __lock_page(struct page *__page) 
int __lock_page_killable(struct page *__page) 
int __lock_page_or_retry(struct page *page, struct mm_struct *mm, unsigned int flags) 
pgoff_t page_cache_next_hole(struct address_space *mapping, pgoff_t index, unsigned long max_scan) 
pgoff_t page_cache_prev_hole(struct address_space *mapping, pgoff_t index, unsigned long max_scan) 
struct page *find_get_entry(struct address_space *mapping, pgoff_t offset) 
struct page *find_lock_entry(struct address_space *mapping, pgoff_t offset) 
struct page *pagecache_get_page(struct address_space *mapping, pgoff_t offset, int fgp_flags, gfp_t gfp_mask) 
unsigned find_get_entries(struct address_space *mapping, pgoff_t start, unsigned int nr_entries, struct page **entries, pgoff_t *indices) 
unsigned find_get_pages_range(struct address_space *mapping, pgoff_t *start, pgoff_t end, unsigned int nr_pages, struct page **pages) 
unsigned find_get_pages_contig(struct address_space *mapping, pgoff_t index, unsigned int nr_pages, struct page **pages) 
unsigned find_get_pages_range_tag(struct address_space *mapping, pgoff_t *index, pgoff_t end, int tag, unsigned int nr_pages, struct page **pages) 
unsigned find_get_entries_tag(struct address_space *mapping, pgoff_t start, int tag, unsigned int nr_entries, struct page **entries, pgoff_t *indices) 
static void shrink_readahead_size_eio(struct file *filp, struct file_ra_state *ra) 
static ssize_t generic_file_buffered_read(struct kiocb *iocb, struct iov_iter *iter, ssize_t written) 
ssize_t generic_file_read_iter(struct kiocb *iocb, struct iov_iter *iter) 
static struct page *wait_on_page_read(struct page *page) 
static struct page *do_read_cache_page(struct address_space *mapping, pgoff_t index, int (*filler)(void *, struct page *), void *data, gfp_t gfp) 
struct page *read_cache_page(struct address_space *mapping, pgoff_t index, int (*filler)(void *, struct page *), void *data) 
struct page *read_cache_page_gfp(struct address_space *mapping, pgoff_t index, gfp_t gfp) 
inline ssize_t generic_write_checks(struct kiocb *iocb, struct iov_iter *from) 
int pagecache_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata) 
int pagecache_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata) 
ssize_t generic_file_direct_write(struct kiocb *iocb, struct iov_iter *from) 
struct page *grab_cache_page_write_begin(struct address_space *mapping, pgoff_t index, unsigned flags) 
ssize_t generic_perform_write(struct file *file, struct iov_iter *i, loff_t pos) 
ssize_t __generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from) 
ssize_t generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from) 
int try_to_release_page(struct page *page, gfp_t gfp_mask) 
