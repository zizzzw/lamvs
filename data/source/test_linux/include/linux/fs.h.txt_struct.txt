struct iattr {unsigned int ia_valid; umode_t  ia_mode; kuid_t  ia_uid; kgid_t  ia_gid; loff_t  ia_size; struct timespec64 ia_atime; struct timespec64 ia_mtime; struct timespec64 ia_ctime; struct file *ia_file; };
enum positive_aop_returns {AOP_WRITEPAGE_ACTIVATE = 0x80000,AOP_TRUNCATED_PAGE = 0x80001,};
enum rw_hint {WRITE_LIFE_NOT_SET = 0,WRITE_LIFE_NONE  = RWH_WRITE_LIFE_NONE,WRITE_LIFE_SHORT = RWH_WRITE_LIFE_SHORT,WRITE_LIFE_MEDIUM = RWH_WRITE_LIFE_MEDIUM,WRITE_LIFE_LONG  = RWH_WRITE_LIFE_LONG,WRITE_LIFE_EXTREME = RWH_WRITE_LIFE_EXTREME,};
struct kiocb {struct file  *ki_filp; loff_t   ki_pos; void (*ki_complete)(struct kiocb *iocb, long ret, long ret2); void   *private; int   ki_flags; u16   ki_hint; u16   ki_ioprio; };
typedef struct { size_t written; size_t count; union { char __user *buf; void *data; };int error; };
struct address_space_operations {int (*writepage)(struct page *page, struct writeback_control *wbc); int (*readpage)(struct file *, struct page *); int (*writepages)(struct address_space *, struct writeback_control *); int (*set_page_dirty)(struct page *page); int (*readpages)(struct file *filp, struct address_space *mapping,struct list_head *pages, unsigned nr_pages); int (*write_begin)(struct file *, struct address_space *mapping,loff_t pos, unsigned len, unsigned flags,struct page **pagep, void **fsdata); int (*write_end)(struct file *, struct address_space *mapping,loff_t pos, unsigned len, unsigned copied,struct page *page, void *fsdata); sector_t (*bmap)(struct address_space *, sector_t); void (*invalidatepage) (struct page *, unsigned int, unsigned int); int (*releasepage) (struct page *, gfp_t); void (*freepage)(struct page *); ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter); int (*migratepage) (struct address_space *,struct page *, struct page *, enum migrate_mode); bool (*isolate_page)(struct page *, isolate_mode_t); void (*putback_page)(struct page *); int (*launder_page) (struct page *); int (*is_partially_uptodate) (struct page *, unsigned long,unsigned long); void (*is_dirty_writeback) (struct page *, bool *, bool *); int (*error_remove_page)(struct address_space *, struct page *); int (*swap_activate)(struct swap_info_struct *sis, struct file *file,sector_t *span); void (*swap_deactivate)(struct file *file); };
struct address_space {struct inode  *host; struct radix_tree_root i_pages; atomic_t  i_mmap_writable; struct rb_root_cached i_mmap; struct rw_semaphore i_mmap_rwsem; unsigned long  nrpages; unsigned long  nrexceptional; pgoff_t   writeback_index; const struct address_space_operations *a_ops; unsigned long  flags; spinlock_t  private_lock; gfp_t   gfp_mask; struct list_head private_list; void   *private_data; errseq_t  wb_err; };
struct block_device {dev_t   bd_dev; int   bd_openers; struct inode *  bd_inode; struct super_block * bd_super; struct mutex  bd_mutex; void *   bd_claiming; void *   bd_holder; int   bd_holders; bool   bd_write_holder; struct list_head bd_holder_disks; struct block_device * bd_contains; unsigned  bd_block_size; u8   bd_partno; struct hd_struct * bd_part; unsigned  bd_part_count; int   bd_invalidated; struct gendisk * bd_disk; struct request_queue *  bd_queue; struct backing_dev_info *bd_bdi; struct list_head bd_list; unsigned long  bd_private; int   bd_fsfreeze_count; struct mutex  bd_fsfreeze_mutex; };
struct inode {umode_t   i_mode; unsigned short  i_opflags; kuid_t   i_uid; kgid_t   i_gid; unsigned int  i_flags; struct posix_acl *i_acl; struct posix_acl *i_default_acl; const struct inode_operations *i_op; struct super_block *i_sb; struct address_space *i_mapping; void   *i_security; unsigned long  i_ino; union { const unsigned int i_nlink; unsigned int __i_nlink; };dev_t   i_rdev; loff_t   i_size; struct timespec64 i_atime; struct timespec64 i_mtime; struct timespec64 i_ctime; spinlock_t  i_lock; unsigned short          i_bytes; unsigned int  i_blkbits; enum rw_hint  i_write_hint; blkcnt_t  i_blocks; seqcount_t  i_size_seqcount; unsigned long  i_state; struct rw_semaphore i_rwsem; unsigned long  dirtied_when; unsigned long  dirtied_time_when; struct hlist_node i_hash; struct list_head i_io_list; struct bdi_writeback *i_wb; int   i_wb_frn_winner; u16   i_wb_frn_avg_time; u16   i_wb_frn_history; struct list_head i_lru; struct list_head i_sb_list; struct list_head i_wb_list; union { struct hlist_head i_dentry; struct rcu_head  i_rcu; };atomic64_t  i_version; atomic_t  i_count; atomic_t  i_dio_count; atomic_t  i_writecount; atomic_t  i_readcount; const struct file_operations *i_fop; struct file_lock_context *i_flctx; struct address_space i_data; struct list_head i_devices; union { struct pipe_inode_info *i_pipe; struct block_device *i_bdev; struct cdev  *i_cdev; char   *i_link; unsigned  i_dir_seq; };__u32   i_generation; __u32   i_fsnotify_mask; struct fsnotify_mark_connector __rcu *i_fsnotify_marks; struct fscrypt_info *i_crypt_info; void   *i_private; };
struct fown_struct {rwlock_t lock; struct pid *pid; enum pid_type pid_type; kuid_t uid, euid; int signum; };
struct file_ra_state {pgoff_t start; unsigned int size; unsigned int async_size; unsigned int ra_pages; unsigned int mmap_miss; loff_t prev_pos; };
struct file {union { struct llist_node fu_llist; struct rcu_head  fu_rcuhead; };struct path  f_path; struct inode  *f_inode; const struct file_operations *f_op; spinlock_t  f_lock; enum rw_hint  f_write_hint; atomic_long_t  f_count; unsigned int   f_flags; fmode_t   f_mode; struct mutex  f_pos_lock; loff_t   f_pos; struct fown_struct f_owner; const struct cred *f_cred; struct file_ra_state f_ra; u64   f_version; void   *f_security; void   *private_data; struct list_head f_ep_links; struct list_head f_tfile_llink; struct address_space *f_mapping; errseq_t  f_wb_err; };
struct file_handle {__u32 handle_bytes; int handle_type; unsigned char f_handle[0]; };
struct file_lock_operations {void (*fl_copy_lock)(struct file_lock *, struct file_lock *); void (*fl_release_private)(struct file_lock *); };
struct lock_manager_operations {int (*lm_compare_owner)(struct file_lock *, struct file_lock *); unsigned long (*lm_owner_key)(struct file_lock *); fl_owner_t (*lm_get_owner)(fl_owner_t); void (*lm_put_owner)(fl_owner_t); void (*lm_notify)(struct file_lock *); int (*lm_grant)(struct file_lock *, int); bool (*lm_break)(struct file_lock *); int (*lm_change)(struct file_lock *, int, struct list_head *); void (*lm_setup)(struct file_lock *, void **); };
struct lock_manager {struct list_head list; bool block_opens; };
struct file_lock {struct file_lock *fl_next; struct list_head fl_list; struct hlist_node fl_link; struct list_head fl_block; fl_owner_t fl_owner; unsigned int fl_flags; unsigned char fl_type; unsigned int fl_pid; int fl_link_cpu; wait_queue_head_t fl_wait; struct file *fl_file; loff_t fl_start; loff_t fl_end; struct fasync_struct * fl_fasync; unsigned long fl_break_time; unsigned long fl_downgrade_time; const struct file_lock_operations *fl_ops; const struct lock_manager_operations *fl_lmops; union { struct nfs_lock_info nfs_fl; struct nfs4_lock_info nfs4_fl; struct { struct list_head link; int state; };};};
struct file_lock_context {spinlock_t  flc_lock; struct list_head flc_flock; struct list_head flc_posix; struct list_head flc_lease; };
struct fasync_struct {rwlock_t  fa_lock; int   magic; int   fa_fd; struct fasync_struct *fa_next; struct file  *fa_file; struct rcu_head  fa_rcu; };
enum {SB_UNFROZEN = 0,SB_FREEZE_WRITE = 1,SB_FREEZE_PAGEFAULT = 2,SB_FREEZE_FS = 3,SB_FREEZE_COMPLETE = 4,};
struct sb_writers {int    frozen; wait_queue_head_t  wait_unfrozen; struct percpu_rw_semaphore rw_sem[SB_FREEZE_LEVELS]; };
struct super_block {struct list_head s_list; dev_t   s_dev; unsigned char  s_blocksize_bits; unsigned long  s_blocksize; loff_t   s_maxbytes; struct file_system_type *s_type; const struct super_operations *s_op; const struct dquot_operations *dq_op; const struct quotactl_ops *s_qcop; const struct export_operations *s_export_op; unsigned long  s_flags; unsigned long  s_iflags; unsigned long  s_magic; struct dentry  *s_root; struct rw_semaphore s_umount; int   s_count; atomic_t  s_active; void                    *s_security; const struct xattr_handler **s_xattr; const struct fscrypt_operations *s_cop; struct hlist_bl_head s_roots; struct list_head s_mounts; struct block_device *s_bdev; struct backing_dev_info *s_bdi; struct mtd_info  *s_mtd; struct hlist_node s_instances; unsigned int  s_quota_types; struct quota_info s_dquot; struct sb_writers s_writers; char   s_id[32]; uuid_t   s_uuid; void    *s_fs_info; unsigned int  s_max_links; fmode_t   s_mode; u32     s_time_gran; struct mutex s_vfs_rename_mutex; char *s_subtype; const struct dentry_operations *s_d_op; int cleancache_poolid; struct shrinker s_shrink; atomic_long_t s_remove_count; int s_readonly_remount; struct workqueue_struct *s_dio_done_wq; struct hlist_head s_pins; struct user_namespace *s_user_ns; struct list_lru  s_dentry_lru ____cacheline_aligned_in_smp; struct list_lru  s_inode_lru ____cacheline_aligned_in_smp; struct rcu_head  rcu; struct work_struct destroy_work; struct mutex  s_sync_lock; int s_stack_depth; spinlock_t  s_inode_list_lock ____cacheline_aligned_in_smp; struct list_head s_inodes; spinlock_t  s_inode_wblist_lock; struct list_head s_inodes_wb; };
struct fiemap_extent_info {unsigned int fi_flags; unsigned int fi_extents_mapped; unsigned int fi_extents_max; struct fiemap_extent __user *fi_extents_start; };
struct dir_context {filldir_t actor; loff_t pos; };
struct file_operations {struct module *owner; loff_t (*llseek) (struct file *, loff_t, int); ssize_t (*read) (struct file *, char __user *, size_t, loff_t *); ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *); ssize_t (*read_iter) (struct kiocb *, struct iov_iter *); ssize_t (*write_iter) (struct kiocb *, struct iov_iter *); int (*iterate) (struct file *, struct dir_context *); int (*iterate_shared) (struct file *, struct dir_context *); __poll_t (*poll) (struct file *, struct poll_table_struct *); long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long); long (*compat_ioctl) (struct file *, unsigned int, unsigned long); int (*mmap) (struct file *, struct vm_area_struct *); unsigned long mmap_supported_flags; int (*open) (struct inode *, struct file *); int (*flush) (struct file *, fl_owner_t id); int (*release) (struct inode *, struct file *); int (*fsync) (struct file *, loff_t, loff_t, int datasync); int (*fasync) (int, struct file *, int); int (*lock) (struct file *, int, struct file_lock *); ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int); unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long); int (*check_flags)(int); int (*flock) (struct file *, int, struct file_lock *); ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int); ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); int (*setlease)(struct file *, long, struct file_lock **, void **); long (*fallocate)(struct file *file, int mode, loff_t offset,loff_t len); void (*show_fdinfo)(struct seq_file *m, struct file *f); unsigned (*mmap_capabilities)(struct file *); ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,loff_t, size_t, unsigned int); int (*clone_file_range)(struct file *, loff_t, struct file *, loff_t,u64); ssize_t (*dedupe_file_range)(struct file *, u64, u64, struct file *,u64); };
struct inode_operations {struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int); const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *); int (*permission) (struct inode *, int); struct posix_acl * (*get_acl)(struct inode *, int); int (*readlink) (struct dentry *, char __user *,int); int (*create) (struct inode *,struct dentry *, umode_t, bool); int (*link) (struct dentry *,struct inode *,struct dentry *); int (*unlink) (struct inode *,struct dentry *); int (*symlink) (struct inode *,struct dentry *,const char *); int (*mkdir) (struct inode *,struct dentry *,umode_t); int (*rmdir) (struct inode *,struct dentry *); int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t); int (*rename) (struct inode *, struct dentry *,struct inode *, struct dentry *, unsigned int); int (*setattr) (struct dentry *, struct iattr *); int (*getattr) (const struct path *, struct kstat *, u32, unsigned int); ssize_t (*listxattr) (struct dentry *, char *, size_t); int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,u64 len); int (*update_time)(struct inode *, struct timespec64 *, int); int (*atomic_open)(struct inode *, struct dentry *,struct file *, unsigned open_flag,umode_t create_mode, int *opened); int (*tmpfile) (struct inode *, struct dentry *, umode_t); int (*set_acl)(struct inode *, struct posix_acl *, int); };
struct super_operations {struct inode *(*alloc_inode)(struct super_block *sb); void (*destroy_inode)(struct inode *); void (*dirty_inode) (struct inode *, int flags); int (*write_inode) (struct inode *, struct writeback_control *wbc); int (*drop_inode) (struct inode *); void (*evict_inode) (struct inode *); void (*put_super) (struct super_block *); int (*sync_fs)(struct super_block *sb, int wait); int (*freeze_super) (struct super_block *); int (*freeze_fs) (struct super_block *); int (*thaw_super) (struct super_block *); int (*unfreeze_fs) (struct super_block *); int (*statfs) (struct dentry *, struct kstatfs *); int (*remount_fs) (struct super_block *, int *, char *); void (*umount_begin) (struct super_block *); int (*show_options)(struct seq_file *, struct dentry *); int (*show_devname)(struct seq_file *, struct dentry *); int (*show_path)(struct seq_file *, struct dentry *); int (*show_stats)(struct seq_file *, struct dentry *); ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t); ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t); struct dquot **(*get_dquots)(struct inode *); int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t); long (*nr_cached_objects)(struct super_block *,struct shrink_control *); long (*free_cached_objects)(struct super_block *,struct shrink_control *); };
enum file_time_flags {S_ATIME = 1,S_MTIME = 2,S_CTIME = 4,S_VERSION = 8,};
struct file_system_type {const char *name; int fs_flags; struct dentry *(*mount) (struct file_system_type *, int,const char *, void *); void (*kill_sb) (struct super_block *); struct module *owner; struct file_system_type * next; struct hlist_head fs_supers; struct lock_class_key s_lock_key; struct lock_class_key s_umount_key; struct lock_class_key s_vfs_rename_key; struct lock_class_key s_writers_key[SB_FREEZE_LEVELS]; struct lock_class_key i_lock_key; struct lock_class_key i_mutex_key; struct lock_class_key i_mutex_dir_key; };
struct filename {const char  *name; const __user char *uptr; int   refcnt; struct audit_names *aname; const char  iname[]; };
enum {FILE_CREATED = 1,FILE_OPENED = 2};
enum kernel_read_file_id {__kernel_read_file_id(__fid_enumify) };
struct tree_descr { const char *name; const struct file_operations *ops; int mode; }; 
struct simple_transaction_argresp {ssize_t size; char data[0]; };
