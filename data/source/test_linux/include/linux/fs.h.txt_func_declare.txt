extern void __init inode_init(void); 
extern void __init inode_init_early(void); 
extern void __init files_init(void); 
extern void __init files_maxfiles_init(void); 
extern unsigned long get_max_files(void); 
typedef int (get_block_t)(struct inode *inode, sector_t iblock, struct buffer_head *bh_result, int create); 
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset, ssize_t bytes, void *private); 
typedef int (*read_actor_t)(read_descriptor_t *, struct page *, unsigned long, unsigned long); 
int pagecache_write_begin(struct file *, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata); 
int pagecache_write_end(struct file *, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata); 
int mapping_tagged(struct address_space *mapping, int tag); 
void lock_two_nondirectories(struct inode *, struct inode*); 
void unlock_two_nondirectories(struct inode *, struct inode*); 
extern struct block_device *I_BDEV(struct inode *inode); 
__attribute__((aligned(4))); 
void locks_start_grace(struct net *, struct lock_manager *); 
void locks_end_grace(struct lock_manager *); 
bool locks_in_grace(struct net *); 
bool opens_in_grace(struct net *); 
extern void send_sigio(struct fown_struct *fown, int fd, int band); 
extern int fasync_helper(int, struct file *, int, struct fasync_struct **); 
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *); 
extern int fasync_remove_entry(struct file *, struct fasync_struct **); 
extern struct fasync_struct *fasync_alloc(void); 
extern void fasync_free(struct fasync_struct *); 
extern void kill_fasync(struct fasync_struct **, int, int); 
extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force); 
extern int f_setown(struct file *filp, unsigned long arg, int force); 
extern void f_delown(struct file *filp); 
extern pid_t f_getown(struct file *filp); 
extern int send_sigurg(struct fown_struct *fown); 
extern struct timespec64 timespec64_trunc(struct timespec64 t, unsigned gran); 
extern struct timespec64 current_time(struct inode *inode); 
void __sb_end_write(struct super_block *sb, int level); 
int __sb_start_write(struct super_block *sb, int level, bool wait); 
extern bool inode_owner_or_capable(const struct inode *inode); 
extern int vfs_create(struct inode *, struct dentry *, umode_t, bool); 
extern int vfs_mkdir(struct inode *, struct dentry *, umode_t); 
extern int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t); 
extern int vfs_symlink(struct inode *, struct dentry *, const char *); 
extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **); 
extern int vfs_rmdir(struct inode *, struct dentry *); 
extern int vfs_unlink(struct inode *, struct dentry *, struct inode **); 
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int); 
extern int vfs_whiteout(struct inode *, struct dentry *); 
extern struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode, int open_flag); 
int vfs_mkobj(struct dentry *, umode_t, int (*f)(struct dentry *, umode_t, void *), void *); 
extern void inode_init_owner(struct inode *inode, const struct inode *dir, umode_t mode); 
extern bool may_open_dev(const struct path *path); 
int fiemap_fill_next_extent(struct fiemap_extent_info *info, u64 logical, u64 phys, u64 len, u32 flags); 
int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags); 
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64, unsigned); 
ssize_t rw_copy_check_uvector(int type, const struct iovec __user * uvector, unsigned long nr_segs, unsigned long fast_segs, struct iovec *fast_pointer, struct iovec **ret_pointer); 
extern ssize_t __vfs_read(struct file *, char __user *, size_t, loff_t *); 
extern ssize_t vfs_read(struct file *, char __user *, size_t, loff_t *); 
extern ssize_t vfs_write(struct file *, const char __user *, size_t, loff_t *); 
extern ssize_t vfs_readv(struct file *, const struct iovec __user *, unsigned long, loff_t *, rwf_t); 
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *, loff_t, size_t, unsigned int); 
extern int vfs_clone_file_prep_inodes(struct inode *inode_in, loff_t pos_in, struct inode *inode_out, loff_t pos_out, u64 *len, bool is_dedupe); 
extern int vfs_clone_file_range(struct file *file_in, loff_t pos_in, struct file *file_out, loff_t pos_out, u64 len); 
extern int vfs_dedupe_file_range_compare(struct inode *src, loff_t srcoff, struct inode *dest, loff_t destoff, loff_t len, bool *is_same); 
extern int vfs_dedupe_file_range(struct file *file, struct file_dedupe_range *same); 
static inline int iocb_flags(struct file *file); 
extern void __mark_inode_dirty(struct inode *, int); 
extern void inc_nlink(struct inode *inode); 
extern void drop_nlink(struct inode *inode); 
extern void clear_nlink(struct inode *inode); 
extern void set_nlink(struct inode *inode, unsigned int nlink); 
extern void touch_atime(const struct path *); 
int sync_inode(struct inode *inode, struct writeback_control *wbc); 
int sync_inode_metadata(struct inode *inode, int wait); 
extern struct dentry *mount_ns(struct file_system_type *fs_type, int flags, void *data, void *ns, struct user_namespace *user_ns, int (*fill_super)(struct super_block *, void *, int)); 
extern struct dentry *mount_single(struct file_system_type *fs_type, int flags, void *data, int (*fill_super)(struct super_block *, void *, int)); 
extern struct dentry *mount_nodev(struct file_system_type *fs_type, int flags, void *data, int (*fill_super)(struct super_block *, void *, int)); 
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path); 
void generic_shutdown_super(struct super_block *sb); 
void kill_anon_super(struct super_block *sb); 
void kill_litter_super(struct super_block *sb); 
void deactivate_super(struct super_block *sb); 
void deactivate_locked_super(struct super_block *sb); 
int set_anon_super(struct super_block *s, void *data); 
int get_anon_bdev(dev_t *); 
void free_anon_bdev(dev_t); 
struct super_block *sget_userns(struct file_system_type *type, int (*test)(struct super_block *,void *), int (*set)(struct super_block *,void *), int flags, struct user_namespace *user_ns, void *data); 
struct super_block *sget(struct file_system_type *type, int (*test)(struct super_block *,void *), int (*set)(struct super_block *,void *), int flags, void *data); 
extern struct dentry *mount_pseudo_xattr(struct file_system_type *, char *, const struct super_operations *ops, const struct xattr_handler **xattr, const struct dentry_operations *dops, unsigned long); 
extern int register_filesystem(struct file_system_type *); 
extern int unregister_filesystem(struct file_system_type *); 
extern struct vfsmount *kern_mount_data(struct file_system_type *, void *data); 
extern void kern_unmount(struct vfsmount *mnt); 
extern int may_umount_tree(struct vfsmount *); 
extern int may_umount(struct vfsmount *); 
extern long do_mount(const char *, const char __user *, const char *, unsigned long, void *); 
extern struct vfsmount *collect_mounts(const struct path *); 
extern void drop_collected_mounts(struct vfsmount *); 
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *, struct vfsmount *); 
extern int vfs_statfs(const struct path *, struct kstatfs *); 
extern int user_statfs(const char __user *, struct kstatfs *); 
extern int fd_statfs(int, struct kstatfs *); 
extern int freeze_super(struct super_block *super); 
extern int thaw_super(struct super_block *super); 
extern bool our_mnt(struct vfsmount *mnt); 
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...); 
extern int super_setup_bdi(struct super_block *sb); 
extern int current_umask(void); 
extern void ihold(struct inode * inode); 
extern void iput(struct inode *); 
extern int generic_update_time(struct inode *, struct timespec64 *, int); 
extern long vfs_truncate(const struct path *, loff_t); 
extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs, struct file *filp); 
extern int vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len); 
extern long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode); 
extern struct file *file_open_name(struct filename *, int, umode_t); 
extern struct file *filp_open(const char *, int, umode_t); 
extern struct file *file_open_root(struct dentry *, struct vfsmount *, const char *, int, umode_t); 
extern struct file * dentry_open(const struct path *, int, const struct cred *); 
extern struct file *filp_clone_open(struct file *); 
extern int filp_close(struct file *, fl_owner_t id); 
extern struct filename *getname_flags(const char __user *, int, int *); 
extern struct filename *getname(const char __user *); 
extern struct filename *getname_kernel(const char *); 
extern void putname(struct filename *name); 
extern int finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *), int *opened); 
extern int finish_no_open(struct file *file, struct dentry *dentry); 
extern int ioctl_preallocate(struct file *filp, void __user *argp); 
extern void __init vfs_caches_init_early(void); 
extern void __init vfs_caches_init(void); 
extern int sync_filesystem(struct super_block *); 
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *); 
extern int register_chrdev_region(dev_t, unsigned, const char *); 
extern int __register_chrdev(unsigned int major, unsigned int baseminor, unsigned int count, const char *name, const struct file_operations *fops); 
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor, unsigned int count, const char *name); 
extern void unregister_chrdev_region(dev_t, unsigned); 
extern void chrdev_show(struct seq_file *,off_t); 
extern void init_special_inode(struct inode *, umode_t, dev_t); 
extern void make_bad_inode(struct inode *); 
extern bool is_bad_inode(struct inode *); 
unsigned long invalidate_mapping_pages(struct address_space *mapping, pgoff_t start, pgoff_t end); 
extern int invalidate_inode_pages2(struct address_space *mapping); 
extern int invalidate_inode_pages2_range(struct address_space *mapping, pgoff_t start, pgoff_t end); 
extern int write_inode_now(struct inode *, int); 
extern int filemap_fdatawrite(struct address_space *); 
extern int filemap_flush(struct address_space *); 
extern int filemap_fdatawait_keep_errors(struct address_space *mapping); 
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart, loff_t lend); 
extern bool filemap_range_has_page(struct address_space *, loff_t lstart, loff_t lend); 
extern int __must_check file_fdatawait_range(struct file *file, loff_t lstart, loff_t lend); 
extern int filemap_write_and_wait(struct address_space *mapping); 
extern int filemap_write_and_wait_range(struct address_space *mapping, loff_t lstart, loff_t lend); 
extern int __filemap_fdatawrite_range(struct address_space *mapping, loff_t start, loff_t end, int sync_mode); 
extern int filemap_fdatawrite_range(struct address_space *mapping, loff_t start, loff_t end); 
extern int filemap_check_errors(struct address_space *mapping); 
extern void __filemap_set_wb_err(struct address_space *mapping, int err); 
extern int __must_check file_fdatawait_range(struct file *file, loff_t lstart, loff_t lend); 
extern int __must_check file_check_and_advance_wb_err(struct file *file); 
extern int __must_check file_write_and_wait_range(struct file *file, loff_t start, loff_t end); 
extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end, int datasync); 
extern int vfs_fsync(struct file *file, int datasync); 
extern void emergency_sync(void); 
extern void emergency_remount(void); 
extern int notify_change(struct dentry *, struct iattr *, struct inode **); 
extern int inode_permission(struct inode *, int); 
extern int generic_permission(struct inode *, int); 
extern int __check_sticky(struct inode *dir, struct inode *inode); 
extern int do_pipe_flags(int *, int); 
extern int kernel_read_file(struct file *, void **, loff_t *, loff_t, enum kernel_read_file_id); 
extern int kernel_read_file_from_path(const char *, void **, loff_t *, loff_t, enum kernel_read_file_id); 
extern int kernel_read_file_from_fd(int, void **, loff_t *, loff_t, enum kernel_read_file_id); 
extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *); 
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *); 
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *); 
extern struct file * open_exec(const char *); 
 extern bool is_subdir(struct dentry *, struct dentry *); 
extern bool path_is_under(const struct path *, const struct path *); 
extern char *file_path(struct file *, char *, int); 
extern loff_t default_llseek(struct file *file, loff_t offset, int whence); 
extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence); 
extern int inode_init_always(struct super_block *, struct inode *); 
extern void inode_init_once(struct inode *); 
extern void address_space_init_once(struct address_space *mapping); 
extern struct inode * igrab(struct inode *); 
extern ino_t iunique(struct super_block *, ino_t); 
extern int inode_needs_sync(struct inode *inode); 
extern int generic_delete_inode(struct inode *inode); 
extern struct inode *ilookup5_nowait(struct super_block *sb, unsigned long hashval, int (*test)(struct inode *, void *), void *data); 
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval, int (*test)(struct inode *, void *), void *data); 
extern struct inode *ilookup(struct super_block *sb, unsigned long ino); 
extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *data); 
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *); 
extern struct inode * iget_locked(struct super_block *, unsigned long); 
extern struct inode *find_inode_nowait(struct super_block *, unsigned long, int (*match)(struct inode *, unsigned long, void *), void *data); 
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *); 
extern int insert_inode_locked(struct inode *); 
extern void unlock_new_inode(struct inode *); 
extern unsigned int get_next_ino(void); 
extern void evict_inodes(struct super_block *sb); 
extern void __iget(struct inode * inode); 
extern void iget_failed(struct inode *); 
extern void clear_inode(struct inode *); 
extern void __destroy_inode(struct inode *); 
extern struct inode *new_inode_pseudo(struct super_block *sb); 
extern struct inode *new_inode(struct super_block *sb); 
extern void free_inode_nonrcu(struct inode *inode); 
extern int should_remove_suid(struct dentry *); 
extern int file_remove_privs(struct file *); 
extern void __insert_inode_hash(struct inode *, unsigned long hashval); 
extern void __remove_inode_hash(struct inode *); 
extern void inode_sb_list_add(struct inode *inode); 
extern int set_blocksize(struct block_device *, int); 
extern int sb_set_blocksize(struct super_block *, int); 
extern int sb_min_blocksize(struct super_block *, int); 
extern int generic_file_mmap(struct file *, struct vm_area_struct *); 
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *); 
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *); 
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *); 
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *); 
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *); 
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *); 
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t); 
ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos, rwf_t flags); 
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos, rwf_t flags); 
extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to); 
extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from); 
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end, int datasync); 
extern void block_sync_page(struct page *page); 
extern ssize_t generic_file_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int); 
extern ssize_t iter_file_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int); 
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe, struct file *out, loff_t *, size_t len, unsigned int flags); 
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out, loff_t *opos, size_t len, unsigned int flags); 
extern void file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping); 
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence); 
extern loff_t no_llseek(struct file *file, loff_t offset, int whence); 
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize); 
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence); 
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset, int whence, loff_t maxsize, loff_t eof); 
extern loff_t fixed_size_llseek(struct file *file, loff_t offset, int whence, loff_t size); 
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t); 
extern loff_t no_seek_end_llseek(struct file *, loff_t, int); 
extern int generic_file_open(struct inode * inode, struct file * filp); 
extern int nonseekable_open(struct inode * inode, struct file * filp); 
void inode_dio_wait(struct inode *inode); 
extern void inode_set_flags(struct inode *inode, unsigned int flags, unsigned int mask); 
extern int readlink_copy(char __user *, int, const char *); 
extern int page_readlink(struct dentry *, char __user *, int); 
extern const char *page_get_link(struct dentry *, struct inode *, struct delayed_call *); 
extern void page_put_link(void *); 
extern int __page_symlink(struct inode *inode, const char *symname, int len, int nofs); 
extern int page_symlink(struct inode *inode, const char *symname, int len); 
extern void kfree_link(void *); 
extern void generic_fillattr(struct inode *, struct kstat *); 
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int); 
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int); 
void __inode_add_bytes(struct inode *inode, loff_t bytes); 
void inode_add_bytes(struct inode *inode, loff_t bytes); 
void __inode_sub_bytes(struct inode *inode, loff_t bytes); 
void inode_sub_bytes(struct inode *inode, loff_t bytes); 
loff_t inode_get_bytes(struct inode *inode); 
void inode_set_bytes(struct inode *inode, loff_t bytes); 
const char *simple_get_link(struct dentry *, struct inode *, struct delayed_call *); 
extern int iterate_dir(struct file *, struct dir_context *); 
extern int vfs_statx(int, const char __user *, int, struct kstat *, u32); 
extern int vfs_statx_fd(unsigned int, struct kstat *, u32, unsigned int); 
extern const char *vfs_get_link(struct dentry *, struct delayed_call *); 
extern int vfs_readlink(struct dentry *, char __user *, int); 
extern int __generic_block_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo, loff_t start, loff_t len, get_block_t *get_block); 
extern int generic_block_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo, u64 start, u64 len, get_block_t *get_block); 
extern struct file_system_type *get_filesystem(struct file_system_type *fs); 
extern void put_filesystem(struct file_system_type *fs); 
extern struct file_system_type *get_fs_type(const char *name); 
extern struct super_block *get_super(struct block_device *); 
extern struct super_block *get_super_thawed(struct block_device *); 
extern struct super_block *get_super_exclusive_thawed(struct block_device *bdev); 
extern struct super_block *get_active_super(struct block_device *bdev); 
extern void drop_super(struct super_block *sb); 
extern void drop_super_exclusive(struct super_block *sb); 
extern void iterate_supers(void (*)(struct super_block *, void *), void *); 
extern void iterate_supers_type(struct file_system_type *, void (*)(struct super_block *, void *), void *); 
extern int dcache_dir_open(struct inode *, struct file *); 
extern int dcache_dir_close(struct inode *, struct file *); 
extern loff_t dcache_dir_lseek(struct file *, loff_t, int); 
extern int dcache_readdir(struct file *, struct dir_context *); 
extern int simple_setattr(struct dentry *, struct iattr *); 
extern int simple_getattr(const struct path *, struct kstat *, u32, unsigned int); 
extern int simple_statfs(struct dentry *, struct kstatfs *); 
extern int simple_open(struct inode *inode, struct file *file); 
extern int simple_link(struct dentry *, struct inode *, struct dentry *); 
extern int simple_unlink(struct inode *, struct dentry *); 
extern int simple_rmdir(struct inode *, struct dentry *); 
extern int simple_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int); 
extern int noop_fsync(struct file *, loff_t, loff_t, int); 
extern int noop_set_page_dirty(struct page *page); 
extern void noop_invalidatepage(struct page *page, unsigned int offset, unsigned int length); 
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter); 
extern int simple_empty(struct dentry *); 
extern int simple_readpage(struct file *file, struct page *page); 
extern int simple_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata); 
extern int simple_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata); 
extern int always_delete_dentry(const struct dentry *); 
extern struct inode *alloc_anon_inode(struct super_block *); 
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **); 
extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags); 
extern ssize_t generic_read_dir(struct file *, char __user *, size_t, loff_t *); 
extern void make_empty_dir_inode(struct inode *inode); 
extern bool is_empty_dir_inode(struct inode *inode); 
struct dentry *d_alloc_name(struct dentry *, const char *); 
extern int simple_fill_super(struct super_block *, unsigned long, const struct tree_descr *); 
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count); 
extern void simple_release_fs(struct vfsmount **mount, int *count); 
extern ssize_t simple_read_from_buffer(void __user *to, size_t count, loff_t *ppos, const void *from, size_t available); 
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos, const void __user *from, size_t count); 
extern int __generic_file_fsync(struct file *, loff_t, loff_t, int); 
extern int generic_file_fsync(struct file *, loff_t, loff_t, int); 
extern int generic_check_addressable(unsigned, u64); 
extern int setattr_prepare(struct dentry *, struct iattr *); 
extern int inode_newsize_ok(const struct inode *, loff_t offset); 
extern void setattr_copy(struct inode *inode, const struct iattr *attr); 
extern int file_update_time(struct file *file); 
char *simple_transaction_get(struct file *file, const char __user *buf, size_t size); 
ssize_t simple_transaction_read(struct file *file, char __user *buf, size_t size, loff_t *pos); 
int simple_transaction_release(struct inode *inode, struct file *file); 
void simple_transaction_set(struct file *file, size_t n); 
int simple_attr_open(struct inode *inode, struct file *file, int (*get)(void *, u64 *), int (*set)(void *, u64), const char *fmt); 
int simple_attr_release(struct inode *inode, struct file *file); 
ssize_t simple_attr_read(struct file *file, char __user *buf, size_t len, loff_t *ppos); 
ssize_t simple_attr_write(struct file *file, const char __user *buf, size_t len, loff_t *ppos); 
int proc_nr_files(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos); 
int proc_nr_dentry(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos); 
int proc_nr_inodes(struct ctl_table *table, int write, void __user *buffer, size_t *lenp, loff_t *ppos); 
int __init get_filesystem_list(char *buf); 
extern bool path_noexec(const struct path *path); 
extern void inode_nohighmem(struct inode *inode); 
