include/linux/typecheck.h
include/linux/preempt.h
include/linux/linkage.h
include/linux/compiler.h
include/linux/irqflags.h
include/linux/thread_info.h
include/linux/kernel.h
include/linux/stringify.h
include/linux/bottom_half.h
include/asm/barrier.h
include/linux/spinlock_types.h
include/linux/rwlock.h
static __always_inline raw_spinlock_t *spinlock_check(spinlock_t *lock) 
static __always_inline void spin_lock(spinlock_t *lock) 
static __always_inline void spin_lock_bh(spinlock_t *lock) 
static __always_inline int spin_trylock(spinlock_t *lock) 
static __always_inline void spin_lock_irq(spinlock_t *lock) 
static __always_inline void spin_unlock(spinlock_t *lock) 
static __always_inline void spin_unlock_bh(spinlock_t *lock) 
static __always_inline void spin_unlock_irq(spinlock_t *lock) 
static __always_inline void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags) 
static __always_inline int spin_trylock_bh(spinlock_t *lock) 
static __always_inline int spin_trylock_irq(spinlock_t *lock) 
static __always_inline int spin_is_locked(spinlock_t *lock) 
static __always_inline int spin_is_contended(spinlock_t *lock) 
include/linux/atomic.h
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock); 
extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock, unsigned long *flags); 
int alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask, size_t max_size, unsigned int cpu_mult, gfp_t gfp); 
void free_bucket_spinlocks(spinlock_t *locks); 
#endif 