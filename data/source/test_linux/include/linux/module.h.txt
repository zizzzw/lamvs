include/linux/list.h
include/linux/stat.h
include/linux/compiler.h
include/linux/cache.h
include/linux/kmod.h
include/linux/init.h
include/linux/elf.h
include/linux/stringify.h
include/linux/kobject.h
include/linux/moduleparam.h
include/linux/jump_label.h
include/linux/export.h
include/linux/rbtree_latch.h
include/linux/error-injection.h
include/linux/percpu.h
include/asm/module.h
struct modversion_info {
unsigned long crc; 
char name[MODULE_NAME_LEN]; 
};
struct module; 
struct exception_table_entry; 
struct module_kobject {
struct kobject kobj; 
struct module *mod; 
struct kobject *drivers_dir; 
struct module_param_attrs *mp; 
struct completion *kobj_completion; 
} __randomize_layout;
struct module_attribute {
struct attribute attr; 
ssize_t (*show)(struct module_attribute *, struct module_kobject *,char *); 
ssize_t (*store)(struct module_attribute *, struct module_kobject *,const char *, size_t count); 
void (*setup)(struct module *, const char *); 
int (*test)(struct module *); 
void (*free)(struct module *); 
};
struct module_version_attribute {
struct module_attribute mattr; 
const char *module_name; 
const char *version; 
} __attribute__ ((__aligned__(sizeof(void *))));
extern ssize_t __modver_version_show(struct module_attribute *, struct module_kobject *, char *); 
extern struct module_attribute module_uevent; 
extern int init_module(void); 
extern void cleanup_module(void); 
struct notifier_block; 
#endif 