include/linux/init.h
include/linux/mm.h
include/linux/fcntl.h
include/linux/slab.h
include/linux/kmod.h
include/linux/major.h
include/linux/device_cgroup.h
include/linux/highmem.h
include/linux/blkdev.h
include/linux/backing-dev.h
include/linux/module.h
include/linux/blkpg.h
include/linux/magic.h
include/linux/dax.h
include/linux/buffer_head.h
include/linux/swap.h
include/linux/pagevec.h
include/linux/writeback.h
include/linux/mpage.h
include/linux/mount.h
include/linux/uio.h
include/linux/namei.h
include/linux/log2.h
include/linux/cleancache.h
include/linux/dax.h
include/linux/badblocks.h
include/linux/task_io_accounting_ops.h
include/linux/falloc.h
include/linux/uaccess.h
?/internal.h
struct bdev_inode {
struct block_device bdev; 
struct inode vfs_inode; 
};
static const struct address_space_operations def_blk_aops; 
static inline struct bdev_inode *BDEV_I(struct inode *inode) 
struct block_device *I_BDEV(struct inode *inode) 
EXPORT_SYMBOL(I_BDEV); 
static void bdev_write_inode(struct block_device *bdev) 
void kill_bdev(struct block_device *bdev) 
EXPORT_SYMBOL(kill_bdev); 
void invalidate_bdev(struct block_device *bdev) 
EXPORT_SYMBOL(invalidate_bdev); 
int set_blocksize(struct block_device *bdev, int size) 
EXPORT_SYMBOL(set_blocksize); 
int sb_set_blocksize(struct super_block *sb, int size) 
EXPORT_SYMBOL(sb_set_blocksize); 
int sb_min_blocksize(struct super_block *sb, int size) 
EXPORT_SYMBOL(sb_min_blocksize); 
static int blkdev_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh, int create) 
static struct inode *bdev_file_inode(struct file *file) 
static unsigned int dio_bio_write_op(struct kiocb *iocb) 
static void blkdev_bio_end_io_simple(struct bio *bio) 
static ssize_t __blkdev_direct_IO_simple(struct kiocb *iocb, struct iov_iter *iter, int nr_pages) 
struct blkdev_dio {
union { 
struct kiocb		*iocb; 
struct task_struct	*waiter; 
}; 
size_t			size; 
atomic_t		ref; 
bool			multi_bio : 1; 
bool			should_dirty : 1; 
bool			is_sync : 1; 
struct bio		bio; 
};
static struct bio_set blkdev_dio_pool; 
static void blkdev_bio_end_io(struct bio *bio) 
static ssize_t __blkdev_direct_IO(struct kiocb *iocb, struct iov_iter *iter, int nr_pages) 
static ssize_t blkdev_direct_IO(struct kiocb *iocb, struct iov_iter *iter) 
static __init int blkdev_init(void) 
module_init(blkdev_init); 
int __sync_blockdev(struct block_device *bdev, int wait) 
int sync_blockdev(struct block_device *bdev) 
EXPORT_SYMBOL(sync_blockdev); 
int fsync_bdev(struct block_device *bdev) 
EXPORT_SYMBOL(fsync_bdev); 
struct super_block *freeze_bdev(struct block_device *bdev) 
EXPORT_SYMBOL(freeze_bdev); 
int thaw_bdev(struct block_device *bdev, struct super_block *sb) 
EXPORT_SYMBOL(thaw_bdev); 
static int blkdev_writepage(struct page *page, struct writeback_control *wbc) 
static int blkdev_readpage(struct file * file, struct page * page) 
static int blkdev_readpages(struct file *file, struct address_space *mapping, struct list_head *pages, unsigned nr_pages) 
static int blkdev_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata) 
static int blkdev_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata) 
static loff_t block_llseek(struct file *file, loff_t offset, int whence) 
 int blkdev_fsync(struct file *filp, loff_t start, loff_t end, int datasync) 
EXPORT_SYMBOL(blkdev_fsync); 
int bdev_read_page(struct block_device *bdev, sector_t sector, struct page *page) 
EXPORT_SYMBOL_GPL(bdev_read_page); 
int bdev_write_page(struct block_device *bdev, sector_t sector, struct page *page, struct writeback_control *wbc) 
EXPORT_SYMBOL_GPL(bdev_write_page); 
static  __cacheline_aligned_in_smp DEFINE_SPINLOCK(bdev_lock); 
static struct kmem_cache * bdev_cachep __read_mostly; 
static struct inode *bdev_alloc_inode(struct super_block *sb) 
static void bdev_i_callback(struct rcu_head *head) 
static void bdev_destroy_inode(struct inode *inode) 
static void init_once(void *foo) 
static void bdev_evict_inode(struct inode *inode) 
static const struct super_operations bdev_sops = { 
.statfs = simple_statfs, .alloc_inode = bdev_alloc_inode, .destroy_inode = bdev_destroy_inode, .drop_inode = generic_delete_inode, .evict_inode = bdev_evict_inode, }; 
static struct dentry *bd_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data) 
static struct file_system_type bd_type = { 
.name		= "bdev", .mount		= bd_mount, .kill_sb	= kill_anon_super, }; 
struct super_block *blockdev_superblock __read_mostly; 
EXPORT_SYMBOL_GPL(blockdev_superblock); 
void __init bdev_cache_init(void) 
static inline unsigned long hash(dev_t dev) 
static int bdev_test(struct inode *inode, void *data) 
static int bdev_set(struct inode *inode, void *data) 
static LIST_HEAD(all_bdevs); 
void bdev_unhash_inode(dev_t dev) 
struct block_device *bdget(dev_t dev) 
EXPORT_SYMBOL(bdget); 
struct block_device *bdgrab(struct block_device *bdev) 
EXPORT_SYMBOL(bdgrab); 
long nr_blockdev_pages(void) 
void bdput(struct block_device *bdev) 
EXPORT_SYMBOL(bdput); 
 static struct block_device *bd_acquire(struct inode *inode) 
void bd_forget(struct inode *inode) 
static bool bd_may_claim(struct block_device *bdev, struct block_device *whole, void *holder) 
static int bd_prepare_to_claim(struct block_device *bdev, struct block_device *whole, void *holder) 
static struct gendisk *bdev_get_gendisk(struct block_device *bdev, int *partno) 
static struct block_device *bd_start_claiming(struct block_device *bdev, void *holder) 
static void flush_disk(struct block_device *bdev, bool kill_dirty) 
void check_disk_size_change(struct gendisk *disk, struct block_device *bdev, bool verbose) 
int revalidate_disk(struct gendisk *disk) 
EXPORT_SYMBOL(revalidate_disk); 
int check_disk_change(struct block_device *bdev) 
EXPORT_SYMBOL(check_disk_change); 
void bd_set_size(struct block_device *bdev, loff_t size) 
EXPORT_SYMBOL(bd_set_size); 
static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part); 
static int __blkdev_get(struct block_device *bdev, fmode_t mode, int for_part) 
int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder) 
EXPORT_SYMBOL(blkdev_get); 
struct block_device *blkdev_get_by_path(const char *path, fmode_t mode, void *holder) 
EXPORT_SYMBOL(blkdev_get_by_path); 
struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode, void *holder) 
EXPORT_SYMBOL(blkdev_get_by_dev); 
static int blkdev_open(struct inode * inode, struct file * filp) 
static void __blkdev_put(struct block_device *bdev, fmode_t mode, int for_part) 
void blkdev_put(struct block_device *bdev, fmode_t mode) 
EXPORT_SYMBOL(blkdev_put); 
static int blkdev_close(struct inode * inode, struct file * filp) 
static long block_ioctl(struct file *file, unsigned cmd, unsigned long arg) 
ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from) 
EXPORT_SYMBOL_GPL(blkdev_write_iter); 
ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to) 
EXPORT_SYMBOL_GPL(blkdev_read_iter); 
static int blkdev_releasepage(struct page *page, gfp_t wait) 
static int blkdev_writepages(struct address_space *mapping, struct writeback_control *wbc) 
static const struct address_space_operations def_blk_aops = { 
.readpage	= blkdev_readpage, .readpages	= blkdev_readpages, .writepage	= blkdev_writepage, .write_begin	= blkdev_write_begin, .write_end	= blkdev_write_end, .writepages	= blkdev_writepages, .releasepage	= blkdev_releasepage, .direct_IO	= blkdev_direct_IO, .is_dirty_writeback = buffer_check_dirty_writeback, }; 
static long blkdev_fallocate(struct file *file, int mode, loff_t start, loff_t len) 
const struct file_operations def_blk_fops = { 
.open		= blkdev_open, .release	= blkdev_close, .llseek		= block_llseek, .read_iter	= blkdev_read_iter, .write_iter	= blkdev_write_iter, .mmap		= generic_file_mmap, .fsync		= blkdev_fsync, .unlocked_ioctl	= block_ioctl, .splice_read	= generic_file_splice_read, .splice_write	= iter_file_splice_write, .fallocate	= blkdev_fallocate, }; 
int ioctl_by_bdev(struct block_device *bdev, unsigned cmd, unsigned long arg) 
EXPORT_SYMBOL(ioctl_by_bdev); 
struct block_device *lookup_bdev(const char *pathname) 
EXPORT_SYMBOL(lookup_bdev); 
int __invalidate_device(struct block_device *bdev, bool kill_dirty) 
EXPORT_SYMBOL(__invalidate_device); 
void iterate_bdevs(void (*func)(struct block_device *, void *), void *arg) 
