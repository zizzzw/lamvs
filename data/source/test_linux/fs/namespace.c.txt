include/linux/syscalls.h
include/linux/export.h
include/linux/capability.h
include/linux/mnt_namespace.h
include/linux/user_namespace.h
include/linux/namei.h
include/linux/security.h
include/linux/cred.h
include/linux/idr.h
include/linux/init.h
include/linux/fs_struct.h
include/linux/fsnotify.h
include/linux/uaccess.h
include/linux/proc_ns.h
include/linux/magic.h
include/linux/bootmem.h
include/linux/task_work.h
include/linux/sched/task.h
?/pnode.h
?/internal.h
unsigned int sysctl_mount_max __read_mostly = 100000; 
static unsigned int m_hash_mask __read_mostly; 
static unsigned int m_hash_shift __read_mostly; 
static unsigned int mp_hash_mask __read_mostly; 
static unsigned int mp_hash_shift __read_mostly; 
static __initdata unsigned long mhash_entries; 
static int __init set_mhash_entries(char *str) 
__setup("mhash_entries=", set_mhash_entries); 
static __initdata unsigned long mphash_entries; 
static int __init set_mphash_entries(char *str) 
__setup("mphash_entries=", set_mphash_entries); 
static u64 event; 
static DEFINE_IDA(mnt_id_ida); 
static DEFINE_IDA(mnt_group_ida); 
static DEFINE_SPINLOCK(mnt_id_lock); 
static int mnt_id_start = 0; 
static int mnt_group_start = 1; 
static struct hlist_head *mount_hashtable __read_mostly; 
static struct hlist_head *mountpoint_hashtable __read_mostly; 
static struct kmem_cache *mnt_cache __read_mostly; 
static DECLARE_RWSEM(namespace_sem); 
struct kobject *fs_kobj; 
EXPORT_SYMBOL_GPL(fs_kobj); 
__cacheline_aligned_in_smp DEFINE_SEQLOCK(mount_lock); 
static inline struct hlist_head *m_hash(struct vfsmount *mnt, struct dentry *dentry) 
static inline struct hlist_head *mp_hash(struct dentry *dentry) 
static int mnt_alloc_id(struct mount *mnt) 
static void mnt_free_id(struct mount *mnt) 
static int mnt_alloc_group_id(struct mount *mnt) 
void mnt_release_group_id(struct mount *mnt) 
static inline void mnt_add_count(struct mount *mnt, int n) 
unsigned int mnt_get_count(struct mount *mnt) 
static void drop_mountpoint(struct fs_pin *p) 
static struct mount *alloc_vfsmnt(const char *name) 
int __mnt_is_readonly(struct vfsmount *mnt) 
EXPORT_SYMBOL_GPL(__mnt_is_readonly); 
static inline void mnt_inc_writers(struct mount *mnt) 
static inline void mnt_dec_writers(struct mount *mnt) 
static unsigned int mnt_get_writers(struct mount *mnt) 
static int mnt_is_readonly(struct vfsmount *mnt) 
int __mnt_want_write(struct vfsmount *m) 
int mnt_want_write(struct vfsmount *m) 
EXPORT_SYMBOL_GPL(mnt_want_write); 
int mnt_clone_write(struct vfsmount *mnt) 
EXPORT_SYMBOL_GPL(mnt_clone_write); 
int __mnt_want_write_file(struct file *file) 
int mnt_want_write_file_path(struct file *file) 
static inline int may_write_real(struct file *file) 
int mnt_want_write_file(struct file *file) 
EXPORT_SYMBOL_GPL(mnt_want_write_file); 
void __mnt_drop_write(struct vfsmount *mnt) 
void mnt_drop_write(struct vfsmount *mnt) 
EXPORT_SYMBOL_GPL(mnt_drop_write); 
void __mnt_drop_write_file(struct file *file) 
void mnt_drop_write_file_path(struct file *file) 
void mnt_drop_write_file(struct file *file) 
EXPORT_SYMBOL(mnt_drop_write_file); 
static int mnt_make_readonly(struct mount *mnt) 
static void __mnt_unmake_readonly(struct mount *mnt) 
int sb_prepare_remount_readonly(struct super_block *sb) 
static void free_vfsmnt(struct mount *mnt) 
static void delayed_free_vfsmnt(struct rcu_head *head) 
int __legitimize_mnt(struct vfsmount *bastard, unsigned seq) 
bool legitimize_mnt(struct vfsmount *bastard, unsigned seq) 
struct mount *__lookup_mnt(struct vfsmount *mnt, struct dentry *dentry) 
struct vfsmount *lookup_mnt(const struct path *path) 
bool __is_local_mountpoint(struct dentry *dentry) 
static struct mountpoint *lookup_mountpoint(struct dentry *dentry) 
static struct mountpoint *get_mountpoint(struct dentry *dentry) 
static void put_mountpoint(struct mountpoint *mp) 
static inline int check_mnt(struct mount *mnt) 
static void touch_mnt_namespace(struct mnt_namespace *ns) 
static void __touch_mnt_namespace(struct mnt_namespace *ns) 
static void unhash_mnt(struct mount *mnt) 
static void detach_mnt(struct mount *mnt, struct path *old_path) 
static void umount_mnt(struct mount *mnt) 
void mnt_set_mountpoint(struct mount *mnt, struct mountpoint *mp, struct mount *child_mnt) 
static void __attach_mnt(struct mount *mnt, struct mount *parent) 
static void attach_mnt(struct mount *mnt, struct mount *parent, struct mountpoint *mp) 
void mnt_change_mountpoint(struct mount *parent, struct mountpoint *mp, struct mount *mnt) 
static void commit_tree(struct mount *mnt) 
static struct mount *next_mnt(struct mount *p, struct mount *root) 
static struct mount *skip_mnt_tree(struct mount *p) 
struct vfsmount * vfs_kern_mount(struct file_system_type *type, int flags, const char *name, void *data) 
EXPORT_SYMBOL_GPL(vfs_kern_mount); 
struct vfsmount * vfs_submount(const struct dentry *mountpoint, struct file_system_type *type, const char *name, void *data) 
EXPORT_SYMBOL_GPL(vfs_submount); 
static struct mount *clone_mnt(struct mount *old, struct dentry *root, int flag) 
static void cleanup_mnt(struct mount *mnt) 
static void __cleanup_mnt(struct rcu_head *head) 
static LLIST_HEAD(delayed_mntput_list); 
static void delayed_mntput(struct work_struct *unused) 
static DECLARE_DELAYED_WORK(delayed_mntput_work, delayed_mntput); 
static void mntput_no_expire(struct mount *mnt) 
void mntput(struct vfsmount *mnt) 
EXPORT_SYMBOL(mntput); 
struct vfsmount *mntget(struct vfsmount *mnt) 
EXPORT_SYMBOL(mntget); 
bool path_is_mountpoint(const struct path *path) 
EXPORT_SYMBOL(path_is_mountpoint); 
struct vfsmount *mnt_clone_internal(const struct path *path) 
int may_umount_tree(struct vfsmount *m) 
EXPORT_SYMBOL(may_umount_tree); 
int may_umount(struct vfsmount *mnt) 
EXPORT_SYMBOL(may_umount); 
static HLIST_HEAD(unmounted); 
static void namespace_unlock(void) 
static inline void namespace_lock(void) 
enum umount_tree_flags {
UMOUNT_SYNC = 1,UMOUNT_PROPAGATE = 2,UMOUNT_CONNECTED = 4,};
static bool disconnect_mount(struct mount *mnt, enum umount_tree_flags how) 
static void umount_tree(struct mount *mnt, enum umount_tree_flags how) 
static void shrink_submounts(struct mount *mnt); 
static int do_umount(struct mount *mnt, int flags) 
void __detach_mounts(struct dentry *dentry) 
static inline bool may_mount(void) 
static inline bool may_mandlock(void) 
int ksys_umount(char __user *name, int flags) 
SYSCALL_DEFINE2(umount, char __user *, name, int, flags) 
static bool is_mnt_ns_file(struct dentry *dentry) 
struct mnt_namespace *to_mnt_ns(struct ns_common *ns) 
static bool mnt_ns_loop(struct dentry *dentry) 
struct mount *copy_tree(struct mount *mnt, struct dentry *dentry, int flag) 
struct vfsmount *collect_mounts(const struct path *path) 
void drop_collected_mounts(struct vfsmount *mnt) 
struct vfsmount *clone_private_mount(const struct path *path) 
EXPORT_SYMBOL_GPL(clone_private_mount); 
int iterate_mounts(int (*f)(struct vfsmount *, void *), void *arg, struct vfsmount *root) 
static void cleanup_group_ids(struct mount *mnt, struct mount *end) 
static int invent_group_ids(struct mount *mnt, bool recurse) 
int count_mounts(struct mnt_namespace *ns, struct mount *mnt) 
static int attach_recursive_mnt(struct mount *source_mnt, struct mount *dest_mnt, struct mountpoint *dest_mp, struct path *parent_path) 
static struct mountpoint *lock_mount(struct path *path) 
static void unlock_mount(struct mountpoint *where) 
static int graft_tree(struct mount *mnt, struct mount *p, struct mountpoint *mp) 
static int flags_to_propagation_type(int ms_flags) 
static int do_change_type(struct path *path, int ms_flags) 
static bool has_locked_children(struct mount *mnt, struct dentry *dentry) 
static int do_loopback(struct path *path, const char *old_name, int recurse) 
static int change_mount_flags(struct vfsmount *mnt, int ms_flags) 
static int do_remount(struct path *path, int ms_flags, int sb_flags, int mnt_flags, void *data) 
static inline int tree_contains_unbindable(struct mount *mnt) 
static int do_move_mount(struct path *path, const char *old_name) 
static struct vfsmount *fs_set_subtype(struct vfsmount *mnt, const char *fstype) 
static int do_add_mount(struct mount *newmnt, struct path *path, int mnt_flags) 
static bool mount_too_revealing(struct vfsmount *mnt, int *new_mnt_flags); 
static int do_new_mount(struct path *path, const char *fstype, int sb_flags, int mnt_flags, const char *name, void *data) 
int finish_automount(struct vfsmount *m, struct path *path) 
void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list) 
EXPORT_SYMBOL(mnt_set_expiry); 
void mark_mounts_for_expiry(struct list_head *mounts) 
EXPORT_SYMBOL_GPL(mark_mounts_for_expiry); 
static int select_submounts(struct mount *parent, struct list_head *graveyard) 
static void shrink_submounts(struct mount *mnt) 
static long exact_copy_from_user(void *to, const void __user * from, unsigned long n) 
void *copy_mount_options(const void __user * data) 
char *copy_mount_string(const void __user *data) 
long do_mount(const char *dev_name, const char __user *dir_name, const char *type_page, unsigned long flags, void *data_page) 
static struct ucounts *inc_mnt_namespaces(struct user_namespace *ns) 
static void dec_mnt_namespaces(struct ucounts *ucounts) 
static void free_mnt_ns(struct mnt_namespace *ns) 
static atomic64_t mnt_ns_seq = ATOMIC64_INIT(1); 
static struct mnt_namespace *alloc_mnt_ns(struct user_namespace *user_ns) 
__latent_entropy struct mnt_namespace *copy_mnt_ns(unsigned long flags, struct mnt_namespace *ns, struct user_namespace *user_ns, struct fs_struct *new_fs) 
static struct mnt_namespace *create_mnt_ns(struct vfsmount *m) 
struct dentry *mount_subtree(struct vfsmount *mnt, const char *name) 
EXPORT_SYMBOL(mount_subtree); 
int ksys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data) 
SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name, char __user *, type, unsigned long, flags, void __user *, data) 
bool is_path_reachable(struct mount *mnt, struct dentry *dentry, const struct path *root) 
bool path_is_under(const struct path *path1, const struct path *path2) 
EXPORT_SYMBOL(path_is_under); 
SYSCALL_DEFINE2(pivot_root, const char __user *, new_root, const char __user *, put_old) 
static void __init init_mount_tree(void) 
void __init mnt_init(void) 
void put_mnt_ns(struct mnt_namespace *ns) 
struct vfsmount *kern_mount_data(struct file_system_type *type, void *data) 
EXPORT_SYMBOL_GPL(kern_mount_data); 
void kern_unmount(struct vfsmount *mnt) 
EXPORT_SYMBOL(kern_unmount); 
bool our_mnt(struct vfsmount *mnt) 
bool current_chrooted(void) 
static bool mnt_already_visible(struct mnt_namespace *ns, struct vfsmount *new, int *new_mnt_flags) 
static bool mount_too_revealing(struct vfsmount *mnt, int *new_mnt_flags) 
bool mnt_may_suid(struct vfsmount *mnt) 
static struct ns_common *mntns_get(struct task_struct *task) 
static void mntns_put(struct ns_common *ns) 
static int mntns_install(struct nsproxy *nsproxy, struct ns_common *ns) 
static struct user_namespace *mntns_owner(struct ns_common *ns) 
const struct proc_ns_operations mntns_operations = { 
.name		= "mnt", .type		= CLONE_NEWNS, .get		= mntns_get, .put		= mntns_put, .install	= mntns_install, .owner		= mntns_owner, }; 
