include/linux/export.h
include/linux/slab.h
include/linux/blkdev.h
include/linux/mount.h
include/linux/security.h
include/linux/writeback.h
include/linux/idr.h
include/linux/mutex.h
include/linux/backing-dev.h
include/linux/rculist_bl.h
include/linux/cleancache.h
include/linux/fsnotify.h
include/linux/lockdep.h
include/linux/user_namespace.h
?/internal.h
static int thaw_super_locked(struct super_block *sb); 
static LIST_HEAD(super_blocks); 
static DEFINE_SPINLOCK(sb_lock); 
static char *sb_writers_name[SB_FREEZE_LEVELS] = { 
"sb_writers", "sb_pagefaults", "sb_internal", }; 
static unsigned long super_cache_scan(struct shrinker *shrink, struct shrink_control *sc) 
static unsigned long super_cache_count(struct shrinker *shrink, struct shrink_control *sc) 
static void destroy_super_work(struct work_struct *work) 
static void destroy_super_rcu(struct rcu_head *head) 
static void destroy_unused_super(struct super_block *s) 
static struct super_block *alloc_super(struct file_system_type *type, int flags, struct user_namespace *user_ns) 
static void __put_super(struct super_block *s) 
static void put_super(struct super_block *sb) 
void deactivate_locked_super(struct super_block *s) 
EXPORT_SYMBOL(deactivate_locked_super); 
void deactivate_super(struct super_block *s) 
EXPORT_SYMBOL(deactivate_super); 
static int grab_super(struct super_block *s) __releases(sb_lock) 
bool trylock_super(struct super_block *sb) 
void generic_shutdown_super(struct super_block *sb) 
EXPORT_SYMBOL(generic_shutdown_super); 
struct super_block *sget_userns(struct file_system_type *type, int (*test)(struct super_block *,void *), int (*set)(struct super_block *,void *), int flags, struct user_namespace *user_ns, void *data) 
EXPORT_SYMBOL(sget_userns); 
struct super_block *sget(struct file_system_type *type, int (*test)(struct super_block *,void *), int (*set)(struct super_block *,void *), int flags, void *data) 
EXPORT_SYMBOL(sget); 
void drop_super(struct super_block *sb) 
EXPORT_SYMBOL(drop_super); 
void drop_super_exclusive(struct super_block *sb) 
EXPORT_SYMBOL(drop_super_exclusive); 
static void __iterate_supers(void (*f)(struct super_block *)) 
void iterate_supers(void (*f)(struct super_block *, void *), void *arg) 
void iterate_supers_type(struct file_system_type *type, void (*f)(struct super_block *, void *), void *arg) 
EXPORT_SYMBOL(iterate_supers_type); 
static struct super_block *__get_super(struct block_device *bdev, bool excl) 
struct super_block *get_super(struct block_device *bdev) 
EXPORT_SYMBOL(get_super); 
static struct super_block *__get_super_thawed(struct block_device *bdev, bool excl) 
struct super_block *get_super_thawed(struct block_device *bdev) 
EXPORT_SYMBOL(get_super_thawed); 
struct super_block *get_super_exclusive_thawed(struct block_device *bdev) 
EXPORT_SYMBOL(get_super_exclusive_thawed); 
struct super_block *get_active_super(struct block_device *bdev) 
struct super_block *user_get_super(dev_t dev) 
int do_remount_sb(struct super_block *sb, int sb_flags, void *data, int force) 
static void do_emergency_remount_callback(struct super_block *sb) 
static void do_emergency_remount(struct work_struct *work) 
void emergency_remount(void) 
static void do_thaw_all_callback(struct super_block *sb) 
static void do_thaw_all(struct work_struct *work) 
void emergency_thaw_all(void) 
static DEFINE_IDA(unnamed_dev_ida); 
static DEFINE_SPINLOCK(unnamed_dev_lock); 
static int unnamed_dev_start = 1; 
int get_anon_bdev(dev_t *p) 
EXPORT_SYMBOL(get_anon_bdev); 
void free_anon_bdev(dev_t dev) 
EXPORT_SYMBOL(free_anon_bdev); 
int set_anon_super(struct super_block *s, void *data) 
EXPORT_SYMBOL(set_anon_super); 
void kill_anon_super(struct super_block *sb) 
EXPORT_SYMBOL(kill_anon_super); 
void kill_litter_super(struct super_block *sb) 
EXPORT_SYMBOL(kill_litter_super); 
static int ns_test_super(struct super_block *sb, void *data) 
static int ns_set_super(struct super_block *sb, void *data) 
struct dentry *mount_ns(struct file_system_type *fs_type, int flags, void *data, void *ns, struct user_namespace *user_ns, int (*fill_super)(struct super_block *, void *, int)) 
EXPORT_SYMBOL(mount_ns); 
struct dentry *mount_nodev(struct file_system_type *fs_type, int flags, void *data, int (*fill_super)(struct super_block *, void *, int)) 
EXPORT_SYMBOL(mount_nodev); 
static int compare_single(struct super_block *s, void *p) 
struct dentry *mount_single(struct file_system_type *fs_type, int flags, void *data, int (*fill_super)(struct super_block *, void *, int)) 
EXPORT_SYMBOL(mount_single); 
struct dentry * mount_fs(struct file_system_type *type, int flags, const char *name, void *data) 
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...) 
EXPORT_SYMBOL(super_setup_bdi_name); 
int super_setup_bdi(struct super_block *sb) 
EXPORT_SYMBOL(super_setup_bdi); 
void __sb_end_write(struct super_block *sb, int level) 
EXPORT_SYMBOL(__sb_end_write); 
int __sb_start_write(struct super_block *sb, int level, bool wait) 
EXPORT_SYMBOL(__sb_start_write); 
static void sb_wait_write(struct super_block *sb, int level) 
static void lockdep_sb_freeze_release(struct super_block *sb) 
static void lockdep_sb_freeze_acquire(struct super_block *sb) 
static void sb_freeze_unlock(struct super_block *sb) 
int freeze_super(struct super_block *sb) 
EXPORT_SYMBOL(freeze_super); 
static int thaw_super_locked(struct super_block *sb) 
int thaw_super(struct super_block *sb) 
EXPORT_SYMBOL(thaw_super); 
