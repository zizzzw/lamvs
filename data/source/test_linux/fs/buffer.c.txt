include/linux/kernel.h
include/linux/sched/signal.h
include/linux/syscalls.h
include/linux/fs.h
include/linux/iomap.h
include/linux/mm.h
include/linux/percpu.h
include/linux/slab.h
include/linux/capability.h
include/linux/blkdev.h
include/linux/file.h
include/linux/quotaops.h
include/linux/highmem.h
include/linux/export.h
include/linux/backing-dev.h
include/linux/writeback.h
include/linux/hash.h
include/linux/suspend.h
include/linux/buffer_head.h
include/linux/task_io_accounting_ops.h
include/linux/bio.h
include/linux/notifier.h
include/linux/cpu.h
include/linux/bitops.h
include/linux/mpage.h
include/linux/bit_spinlock.h
include/linux/pagevec.h
include/trace/events/block.h
static int fsync_buffers_list(spinlock_t *lock, struct list_head *list); 
static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh, enum rw_hint hint, struct writeback_control *wbc); 
inline void touch_buffer(struct buffer_head *bh) 
EXPORT_SYMBOL(touch_buffer); 
void __lock_buffer(struct buffer_head *bh) 
EXPORT_SYMBOL(__lock_buffer); 
void unlock_buffer(struct buffer_head *bh) 
EXPORT_SYMBOL(unlock_buffer); 
void buffer_check_dirty_writeback(struct page *page, bool *dirty, bool *writeback) 
EXPORT_SYMBOL(buffer_check_dirty_writeback); 
void __wait_on_buffer(struct buffer_head * bh) 
EXPORT_SYMBOL(__wait_on_buffer); 
static void __clear_page_buffers(struct page *page) 
static void buffer_io_error(struct buffer_head *bh, char *msg) 
static void __end_buffer_read_notouch(struct buffer_head *bh, int uptodate) 
void end_buffer_read_sync(struct buffer_head *bh, int uptodate) 
EXPORT_SYMBOL(end_buffer_read_sync); 
void end_buffer_write_sync(struct buffer_head *bh, int uptodate) 
EXPORT_SYMBOL(end_buffer_write_sync); 
static struct buffer_head * __find_get_block_slow(struct block_device *bdev, sector_t block) 
static void end_buffer_async_read(struct buffer_head *bh, int uptodate) 
void end_buffer_async_write(struct buffer_head *bh, int uptodate) 
EXPORT_SYMBOL(end_buffer_async_write); 
static void mark_buffer_async_read(struct buffer_head *bh) 
static void mark_buffer_async_write_endio(struct buffer_head *bh, bh_end_io_t *handler) 
void mark_buffer_async_write(struct buffer_head *bh) 
EXPORT_SYMBOL(mark_buffer_async_write); 
static void __remove_assoc_queue(struct buffer_head *bh) 
int inode_has_buffers(struct inode *inode) 
static int osync_buffers_list(spinlock_t *lock, struct list_head *list) 
void emergency_thaw_bdev(struct super_block *sb) 
int sync_mapping_buffers(struct address_space *mapping) 
EXPORT_SYMBOL(sync_mapping_buffers); 
void write_boundary_block(struct block_device *bdev, sector_t bblock, unsigned blocksize) 
void mark_buffer_dirty_inode(struct buffer_head *bh, struct inode *inode) 
EXPORT_SYMBOL(mark_buffer_dirty_inode); 
void __set_page_dirty(struct page *page, struct address_space *mapping, int warn) 
EXPORT_SYMBOL_GPL(__set_page_dirty); 
int __set_page_dirty_buffers(struct page *page) 
EXPORT_SYMBOL(__set_page_dirty_buffers); 
static int fsync_buffers_list(spinlock_t *lock, struct list_head *list) 
void invalidate_inode_buffers(struct inode *inode) 
EXPORT_SYMBOL(invalidate_inode_buffers); 
int remove_inode_buffers(struct inode *inode) 
struct buffer_head *alloc_page_buffers(struct page *page, unsigned long size, bool retry) 
EXPORT_SYMBOL_GPL(alloc_page_buffers); 
static inline void link_dev_buffers(struct page *page, struct buffer_head *head) 
static sector_t blkdev_max_block(struct block_device *bdev, unsigned int size) 
static sector_t init_page_buffers(struct page *page, struct block_device *bdev, sector_t block, int size) 
static int grow_dev_page(struct block_device *bdev, sector_t block, pgoff_t index, int size, int sizebits, gfp_t gfp) 
static int grow_buffers(struct block_device *bdev, sector_t block, int size, gfp_t gfp) 
static struct buffer_head * __getblk_slow(struct block_device *bdev, sector_t block, unsigned size, gfp_t gfp) 
void mark_buffer_dirty(struct buffer_head *bh) 
EXPORT_SYMBOL(mark_buffer_dirty); 
void mark_buffer_write_io_error(struct buffer_head *bh) 
EXPORT_SYMBOL(mark_buffer_write_io_error); 
void __brelse(struct buffer_head * buf) 
EXPORT_SYMBOL(__brelse); 
void __bforget(struct buffer_head *bh) 
EXPORT_SYMBOL(__bforget); 
static struct buffer_head *__bread_slow(struct buffer_head *bh) 
struct bh_lru {
struct buffer_head *bhs[BH_LRU_SIZE]; 
};
static DEFINE_PER_CPU(struct bh_lru, bh_lrus) = {{ NULL }}; 
static inline void check_irqs_on(void) 
static void bh_lru_install(struct buffer_head *bh) 
static struct buffer_head * lookup_bh_lru(struct block_device *bdev, sector_t block, unsigned size) 
struct buffer_head * __find_get_block(struct block_device *bdev, sector_t block, unsigned size) 
EXPORT_SYMBOL(__find_get_block); 
struct buffer_head * __getblk_gfp(struct block_device *bdev, sector_t block, unsigned size, gfp_t gfp) 
EXPORT_SYMBOL(__getblk_gfp); 
void __breadahead(struct block_device *bdev, sector_t block, unsigned size) 
EXPORT_SYMBOL(__breadahead); 
struct buffer_head * __bread_gfp(struct block_device *bdev, sector_t block, unsigned size, gfp_t gfp) 
EXPORT_SYMBOL(__bread_gfp); 
static void invalidate_bh_lru(void *arg) 
static bool has_bh_in_lru(int cpu, void *dummy) 
void invalidate_bh_lrus(void) 
EXPORT_SYMBOL_GPL(invalidate_bh_lrus); 
void set_bh_page(struct buffer_head *bh, struct page *page, unsigned long offset) 
EXPORT_SYMBOL(set_bh_page); 
static void discard_buffer(struct buffer_head * bh) 
void block_invalidatepage(struct page *page, unsigned int offset, unsigned int length) 
EXPORT_SYMBOL(block_invalidatepage); 
void create_empty_buffers(struct page *page, unsigned long blocksize, unsigned long b_state) 
EXPORT_SYMBOL(create_empty_buffers); 
void clean_bdev_aliases(struct block_device *bdev, sector_t block, sector_t len) 
EXPORT_SYMBOL(clean_bdev_aliases); 
static inline int block_size_bits(unsigned int blocksize) 
static struct buffer_head *create_page_buffers(struct page *page, struct inode *inode, unsigned int b_state) 
int __block_write_full_page(struct inode *inode, struct page *page, get_block_t *get_block, struct writeback_control *wbc, bh_end_io_t *handler) 
EXPORT_SYMBOL(__block_write_full_page); 
void page_zero_new_buffers(struct page *page, unsigned from, unsigned to) 
EXPORT_SYMBOL(page_zero_new_buffers); 
static void iomap_to_bh(struct inode *inode, sector_t block, struct buffer_head *bh, struct iomap *iomap) 
int __block_write_begin_int(struct page *page, loff_t pos, unsigned len, get_block_t *get_block, struct iomap *iomap) 
int __block_write_begin(struct page *page, loff_t pos, unsigned len, get_block_t *get_block) 
EXPORT_SYMBOL(__block_write_begin); 
static int __block_commit_write(struct inode *inode, struct page *page, unsigned from, unsigned to) 
int block_write_begin(struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, get_block_t *get_block) 
EXPORT_SYMBOL(block_write_begin); 
int block_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata) 
EXPORT_SYMBOL(block_write_end); 
int generic_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata) 
EXPORT_SYMBOL(generic_write_end); 
int block_is_partially_uptodate(struct page *page, unsigned long from, unsigned long count) 
EXPORT_SYMBOL(block_is_partially_uptodate); 
int block_read_full_page(struct page *page, get_block_t *get_block) 
EXPORT_SYMBOL(block_read_full_page); 
int generic_cont_expand_simple(struct inode *inode, loff_t size) 
EXPORT_SYMBOL(generic_cont_expand_simple); 
static int cont_expand_zero(struct file *file, struct address_space *mapping, loff_t pos, loff_t *bytes) 
int cont_write_begin(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, get_block_t *get_block, loff_t *bytes) 
EXPORT_SYMBOL(cont_write_begin); 
int block_commit_write(struct page *page, unsigned from, unsigned to) 
EXPORT_SYMBOL(block_commit_write); 
int block_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf, get_block_t get_block) 
EXPORT_SYMBOL(block_page_mkwrite); 
static void end_buffer_read_nobh(struct buffer_head *bh, int uptodate) 
static void attach_nobh_buffers(struct page *page, struct buffer_head *head) 
int nobh_write_begin(struct address_space *mapping, loff_t pos, unsigned len, unsigned flags, struct page **pagep, void **fsdata, get_block_t *get_block) 
EXPORT_SYMBOL(nobh_write_begin); 
int nobh_write_end(struct file *file, struct address_space *mapping, loff_t pos, unsigned len, unsigned copied, struct page *page, void *fsdata) 
EXPORT_SYMBOL(nobh_write_end); 
int nobh_writepage(struct page *page, get_block_t *get_block, struct writeback_control *wbc) 
EXPORT_SYMBOL(nobh_writepage); 
int nobh_truncate_page(struct address_space *mapping, loff_t from, get_block_t *get_block) 
EXPORT_SYMBOL(nobh_truncate_page); 
int block_truncate_page(struct address_space *mapping, loff_t from, get_block_t *get_block) 
EXPORT_SYMBOL(block_truncate_page); 
int block_write_full_page(struct page *page, get_block_t *get_block, struct writeback_control *wbc) 
EXPORT_SYMBOL(block_write_full_page); 
sector_t generic_block_bmap(struct address_space *mapping, sector_t block, get_block_t *get_block) 
EXPORT_SYMBOL(generic_block_bmap); 
static void end_bio_bh_io_sync(struct bio *bio) 
void guard_bio_eod(int op, struct bio *bio) 
static int submit_bh_wbc(int op, int op_flags, struct buffer_head *bh, enum rw_hint write_hint, struct writeback_control *wbc) 
int submit_bh(int op, int op_flags, struct buffer_head *bh) 
EXPORT_SYMBOL(submit_bh); 
void ll_rw_block(int op, int op_flags,  int nr, struct buffer_head *bhs[]) 
EXPORT_SYMBOL(ll_rw_block); 
void write_dirty_buffer(struct buffer_head *bh, int op_flags) 
EXPORT_SYMBOL(write_dirty_buffer); 
int __sync_dirty_buffer(struct buffer_head *bh, int op_flags) 
EXPORT_SYMBOL(__sync_dirty_buffer); 
int sync_dirty_buffer(struct buffer_head *bh) 
EXPORT_SYMBOL(sync_dirty_buffer); 
static inline int buffer_busy(struct buffer_head *bh) 
static int drop_buffers(struct page *page, struct buffer_head **buffers_to_free) 
int try_to_free_buffers(struct page *page) 
EXPORT_SYMBOL(try_to_free_buffers); 
SYSCALL_DEFINE2(bdflush, int, func, long, data) 
static struct kmem_cache *bh_cachep __read_mostly; 
static unsigned long max_buffer_heads; 
int buffer_heads_over_limit; 
struct bh_accounting {
int nr; 
int ratelimit; 
};
static DEFINE_PER_CPU(struct bh_accounting, bh_accounting) = {0, 0}; 
static void recalc_bh_state(void) 
struct buffer_head *alloc_buffer_head(gfp_t gfp_flags) 
EXPORT_SYMBOL(alloc_buffer_head); 
void free_buffer_head(struct buffer_head *bh) 
EXPORT_SYMBOL(free_buffer_head); 
static int buffer_exit_cpu_dead(unsigned int cpu) 
int bh_uptodate_or_lock(struct buffer_head *bh) 
EXPORT_SYMBOL(bh_uptodate_or_lock); 
int bh_submit_read(struct buffer_head *bh) 
EXPORT_SYMBOL(bh_submit_read); 
void __init buffer_init(void) 
