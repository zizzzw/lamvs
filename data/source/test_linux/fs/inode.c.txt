include/linux/export.h
include/linux/fs.h
include/linux/mm.h
include/linux/backing-dev.h
include/linux/hash.h
include/linux/swap.h
include/linux/security.h
include/linux/cdev.h
include/linux/bootmem.h
include/linux/fsnotify.h
include/linux/mount.h
include/linux/posix_acl.h
include/linux/prefetch.h
include/linux/buffer_head.h
include/linux/ratelimit.h
include/linux/list_lru.h
include/linux/iversion.h
include/trace/events/writeback.h
?/internal.h
static unsigned int i_hash_mask __read_mostly; 
static unsigned int i_hash_shift __read_mostly; 
static struct hlist_head *inode_hashtable __read_mostly; 
static __cacheline_aligned_in_smp DEFINE_SPINLOCK(inode_hash_lock); 
const struct address_space_operations empty_aops = { 
}; 
EXPORT_SYMBOL(empty_aops); 
struct inodes_stat_t inodes_stat; 
static DEFINE_PER_CPU(unsigned long, nr_inodes); 
static DEFINE_PER_CPU(unsigned long, nr_unused); 
static struct kmem_cache *inode_cachep __read_mostly; 
static long get_nr_inodes(void) 
static inline long get_nr_inodes_unused(void) 
long get_nr_dirty_inodes(void) 
static int no_open(struct inode *inode, struct file *file) 
int inode_init_always(struct super_block *sb, struct inode *inode) 
EXPORT_SYMBOL(inode_init_always); 
static struct inode *alloc_inode(struct super_block *sb) 
void free_inode_nonrcu(struct inode *inode) 
EXPORT_SYMBOL(free_inode_nonrcu); 
void __destroy_inode(struct inode *inode) 
EXPORT_SYMBOL(__destroy_inode); 
static void i_callback(struct rcu_head *head) 
static void destroy_inode(struct inode *inode) 
void drop_nlink(struct inode *inode) 
EXPORT_SYMBOL(drop_nlink); 
void clear_nlink(struct inode *inode) 
EXPORT_SYMBOL(clear_nlink); 
void set_nlink(struct inode *inode, unsigned int nlink) 
EXPORT_SYMBOL(set_nlink); 
void inc_nlink(struct inode *inode) 
EXPORT_SYMBOL(inc_nlink); 
static void __address_space_init_once(struct address_space *mapping) 
void address_space_init_once(struct address_space *mapping) 
EXPORT_SYMBOL(address_space_init_once); 
void inode_init_once(struct inode *inode) 
EXPORT_SYMBOL(inode_init_once); 
static void init_once(void *foo) 
void __iget(struct inode *inode) 
void ihold(struct inode *inode) 
EXPORT_SYMBOL(ihold); 
static void inode_lru_list_add(struct inode *inode) 
void inode_add_lru(struct inode *inode) 
static void inode_lru_list_del(struct inode *inode) 
void inode_sb_list_add(struct inode *inode) 
EXPORT_SYMBOL_GPL(inode_sb_list_add); 
static inline void inode_sb_list_del(struct inode *inode) 
static unsigned long hash(struct super_block *sb, unsigned long hashval) 
void __insert_inode_hash(struct inode *inode, unsigned long hashval) 
EXPORT_SYMBOL(__insert_inode_hash); 
void __remove_inode_hash(struct inode *inode) 
EXPORT_SYMBOL(__remove_inode_hash); 
void clear_inode(struct inode *inode) 
EXPORT_SYMBOL(clear_inode); 
static void evict(struct inode *inode) 
static void dispose_list(struct list_head *head) 
void evict_inodes(struct super_block *sb) 
EXPORT_SYMBOL_GPL(evict_inodes); 
int invalidate_inodes(struct super_block *sb, bool kill_dirty) 
static enum lru_status inode_lru_isolate(struct list_head *item, struct list_lru_one *lru, spinlock_t *lru_lock, void *arg) 
long prune_icache_sb(struct super_block *sb, struct shrink_control *sc) 
static void __wait_on_freeing_inode(struct inode *inode); 
static struct inode *find_inode(struct super_block *sb, struct hlist_head *head, int (*test)(struct inode *, void *), void *data) 
static struct inode *find_inode_fast(struct super_block *sb, struct hlist_head *head, unsigned long ino) 
static DEFINE_PER_CPU(unsigned int, last_ino); 
unsigned int get_next_ino(void) 
EXPORT_SYMBOL(get_next_ino); 
struct inode *new_inode_pseudo(struct super_block *sb) 
struct inode *new_inode(struct super_block *sb) 
EXPORT_SYMBOL(new_inode); 
void unlock_new_inode(struct inode *inode) 
EXPORT_SYMBOL(unlock_new_inode); 
void lock_two_nondirectories(struct inode *inode1, struct inode *inode2) 
EXPORT_SYMBOL(lock_two_nondirectories); 
void unlock_two_nondirectories(struct inode *inode1, struct inode *inode2) 
EXPORT_SYMBOL(unlock_two_nondirectories); 
struct inode *inode_insert5(struct inode *inode, unsigned long hashval, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *data) 
EXPORT_SYMBOL(inode_insert5); 
struct inode *iget5_locked(struct super_block *sb, unsigned long hashval, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *data) 
EXPORT_SYMBOL(iget5_locked); 
struct inode *iget_locked(struct super_block *sb, unsigned long ino) 
EXPORT_SYMBOL(iget_locked); 
static int test_inode_iunique(struct super_block *sb, unsigned long ino) 
ino_t iunique(struct super_block *sb, ino_t max_reserved) 
EXPORT_SYMBOL(iunique); 
struct inode *igrab(struct inode *inode) 
EXPORT_SYMBOL(igrab); 
struct inode *ilookup5_nowait(struct super_block *sb, unsigned long hashval, int (*test)(struct inode *, void *), void *data) 
EXPORT_SYMBOL(ilookup5_nowait); 
struct inode *ilookup5(struct super_block *sb, unsigned long hashval, int (*test)(struct inode *, void *), void *data) 
EXPORT_SYMBOL(ilookup5); 
struct inode *ilookup(struct super_block *sb, unsigned long ino) 
EXPORT_SYMBOL(ilookup); 
struct inode *find_inode_nowait(struct super_block *sb, unsigned long hashval, int (*match)(struct inode *, unsigned long, void *), void *data) 
EXPORT_SYMBOL(find_inode_nowait); 
int insert_inode_locked(struct inode *inode) 
EXPORT_SYMBOL(insert_inode_locked); 
int insert_inode_locked4(struct inode *inode, unsigned long hashval, int (*test)(struct inode *, void *), void *data) 
EXPORT_SYMBOL(insert_inode_locked4); 
int generic_delete_inode(struct inode *inode) 
EXPORT_SYMBOL(generic_delete_inode); 
static void iput_final(struct inode *inode) 
void iput(struct inode *inode) 
EXPORT_SYMBOL(iput); 
sector_t bmap(struct inode *inode, sector_t block) 
EXPORT_SYMBOL(bmap); 
static void update_ovl_inode_times(struct dentry *dentry, struct inode *inode, bool rcu) 
static int relatime_need_update(const struct path *path, struct inode *inode, struct timespec now, bool rcu) 
int generic_update_time(struct inode *inode, struct timespec64 *time, int flags) 
EXPORT_SYMBOL(generic_update_time); 
static int update_time(struct inode *inode, struct timespec64 *time, int flags) 
bool __atime_needs_update(const struct path *path, struct inode *inode, bool rcu) 
void touch_atime(const struct path *path) 
EXPORT_SYMBOL(touch_atime); 
int should_remove_suid(struct dentry *dentry) 
EXPORT_SYMBOL(should_remove_suid); 
int dentry_needs_remove_privs(struct dentry *dentry) 
static int __remove_privs(struct dentry *dentry, int kill) 
int file_remove_privs(struct file *file) 
EXPORT_SYMBOL(file_remove_privs); 
int file_update_time(struct file *file) 
EXPORT_SYMBOL(file_update_time); 
int inode_needs_sync(struct inode *inode) 
EXPORT_SYMBOL(inode_needs_sync); 
static void __wait_on_freeing_inode(struct inode *inode) 
static __initdata unsigned long ihash_entries; 
static int __init set_ihash_entries(char *str) 
__setup("ihash_entries=", set_ihash_entries); 
void __init inode_init_early(void) 
void __init inode_init(void) 
void init_special_inode(struct inode *inode, umode_t mode, dev_t rdev) 
EXPORT_SYMBOL(init_special_inode); 
void inode_init_owner(struct inode *inode, const struct inode *dir, umode_t mode) 
EXPORT_SYMBOL(inode_init_owner); 
bool inode_owner_or_capable(const struct inode *inode) 
EXPORT_SYMBOL(inode_owner_or_capable); 
static void __inode_dio_wait(struct inode *inode) 
void inode_dio_wait(struct inode *inode) 
EXPORT_SYMBOL(inode_dio_wait); 
void inode_set_flags(struct inode *inode, unsigned int flags, unsigned int mask) 
EXPORT_SYMBOL(inode_set_flags); 
void inode_nohighmem(struct inode *inode) 
EXPORT_SYMBOL(inode_nohighmem); 
struct timespec64 timespec64_trunc(struct timespec64 t, unsigned gran) 
EXPORT_SYMBOL(timespec64_trunc); 
struct timespec64 current_time(struct inode *inode) 
EXPORT_SYMBOL(current_time); 
