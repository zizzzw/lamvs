__setup("mhash_entries=", set_mhash_entries); 
__setup("mphash_entries=", set_mphash_entries); 
static DEFINE_IDA(mnt_id_ida); 
static DEFINE_IDA(mnt_group_ida); 
static DEFINE_SPINLOCK(mnt_id_lock); 
static DECLARE_RWSEM(namespace_sem); 
EXPORT_SYMBOL_GPL(fs_kobj); 
__cacheline_aligned_in_smp DEFINE_SEQLOCK(mount_lock); 
EXPORT_SYMBOL_GPL(__mnt_is_readonly); 
EXPORT_SYMBOL_GPL(mnt_want_write); 
EXPORT_SYMBOL_GPL(mnt_clone_write); 
EXPORT_SYMBOL_GPL(mnt_want_write_file); 
EXPORT_SYMBOL_GPL(mnt_drop_write); 
EXPORT_SYMBOL(mnt_drop_write_file); 
EXPORT_SYMBOL_GPL(vfs_kern_mount); 
EXPORT_SYMBOL_GPL(vfs_submount); 
static LLIST_HEAD(delayed_mntput_list); 
static DECLARE_DELAYED_WORK(delayed_mntput_work, delayed_mntput); 
EXPORT_SYMBOL(mntput); 
EXPORT_SYMBOL(mntget); 
EXPORT_SYMBOL(path_is_mountpoint); 
EXPORT_SYMBOL(may_umount_tree); 
EXPORT_SYMBOL(may_umount); 
static HLIST_HEAD(unmounted); 
static void shrink_submounts(struct mount *mnt); 
EXPORT_SYMBOL_GPL(clone_private_mount); 
static bool mount_too_revealing(struct vfsmount *mnt, int *new_mnt_flags); 
EXPORT_SYMBOL(mnt_set_expiry); 
EXPORT_SYMBOL_GPL(mark_mounts_for_expiry); 
static atomic64_t mnt_ns_seq = ATOMIC64_INIT(1); 
EXPORT_SYMBOL(mount_subtree); 
EXPORT_SYMBOL(path_is_under); 
EXPORT_SYMBOL_GPL(kern_mount_data); 
EXPORT_SYMBOL(kern_unmount); 
