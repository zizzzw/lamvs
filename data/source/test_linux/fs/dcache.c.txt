include/linux/ratelimit.h
include/linux/string.h
include/linux/mm.h
include/linux/fs.h
include/linux/fsnotify.h
include/linux/slab.h
include/linux/init.h
include/linux/hash.h
include/linux/cache.h
include/linux/export.h
include/linux/security.h
include/linux/seqlock.h
include/linux/bootmem.h
include/linux/bit_spinlock.h
include/linux/rculist_bl.h
include/linux/list_lru.h
?/internal.h
?/mount.h
int sysctl_vfs_cache_pressure __read_mostly = 100; 
EXPORT_SYMBOL_GPL(sysctl_vfs_cache_pressure); 
__cacheline_aligned_in_smp DEFINE_SEQLOCK(rename_lock); 
EXPORT_SYMBOL(rename_lock); 
static struct kmem_cache *dentry_cache __read_mostly; 
const struct qstr empty_name = QSTR_INIT("", 0); 
EXPORT_SYMBOL(empty_name); 
const struct qstr slash_name = QSTR_INIT("/", 1); 
EXPORT_SYMBOL(slash_name); 
static unsigned int d_hash_shift __read_mostly; 
static struct hlist_bl_head *dentry_hashtable __read_mostly; 
static inline struct hlist_bl_head *d_hash(unsigned int hash) 
static struct hlist_bl_head in_lookup_hashtable[1 << IN_LOOKUP_SHIFT]; 
static inline struct hlist_bl_head *in_lookup_hash(const struct dentry *parent, unsigned int hash) 
struct dentry_stat_t dentry_stat = {
.age_limit = 45,};
static DEFINE_PER_CPU(long, nr_dentry); 
static DEFINE_PER_CPU(long, nr_dentry_unused); 
static inline int dentry_cmp(const struct dentry *dentry, const unsigned char *ct, unsigned tcount) 
struct external_name {
union { 
atomic_t count; 
struct rcu_head head; 
} u; 
unsigned char name[]; 
};
static inline struct external_name *external_name(struct dentry *dentry) 
static void __d_free(struct rcu_head *head) 
static void __d_free_external_name(struct rcu_head *head) 
static void __d_free_external(struct rcu_head *head) 
static inline int dname_external(const struct dentry *dentry) 
void take_dentry_name_snapshot(struct name_snapshot *name, struct dentry *dentry) 
EXPORT_SYMBOL(take_dentry_name_snapshot); 
void release_dentry_name_snapshot(struct name_snapshot *name) 
EXPORT_SYMBOL(release_dentry_name_snapshot); 
static inline void __d_set_inode_and_type(struct dentry *dentry, struct inode *inode, unsigned type_flags) 
static inline void __d_clear_type_and_inode(struct dentry *dentry) 
static void dentry_free(struct dentry *dentry) 
static void dentry_unlink_inode(struct dentry * dentry) 
__releases(dentry->d_lock) 
__releases(dentry->d_inode->i_lock) 
static void d_lru_add(struct dentry *dentry) 
static void d_lru_del(struct dentry *dentry) 
static void d_shrink_del(struct dentry *dentry) 
static void d_shrink_add(struct dentry *dentry, struct list_head *list) 
static void d_lru_isolate(struct list_lru_one *lru, struct dentry *dentry) 
static void d_lru_shrink_move(struct list_lru_one *lru, struct dentry *dentry, struct list_head *list) 
static void ___d_drop(struct dentry *dentry) 
void __d_drop(struct dentry *dentry) 
EXPORT_SYMBOL(__d_drop); 
void d_drop(struct dentry *dentry) 
EXPORT_SYMBOL(d_drop); 
static inline void dentry_unlist(struct dentry *dentry, struct dentry *parent) 
static void __dentry_kill(struct dentry *dentry) 
static struct dentry *__lock_parent(struct dentry *dentry) 
static inline struct dentry *lock_parent(struct dentry *dentry) 
static inline bool retain_dentry(struct dentry *dentry) 
static struct dentry *dentry_kill(struct dentry *dentry) 
__releases(dentry->d_lock) 
static inline bool fast_dput(struct dentry *dentry) 
void dput(struct dentry *dentry) 
EXPORT_SYMBOL(dput); 
static inline void __dget_dlock(struct dentry *dentry) 
static inline void __dget(struct dentry *dentry) 
struct dentry *dget_parent(struct dentry *dentry) 
EXPORT_SYMBOL(dget_parent); 
static struct dentry * __d_find_any_alias(struct inode *inode) 
struct dentry *d_find_any_alias(struct inode *inode) 
EXPORT_SYMBOL(d_find_any_alias); 
static struct dentry *__d_find_alias(struct inode *inode) 
struct dentry *d_find_alias(struct inode *inode) 
EXPORT_SYMBOL(d_find_alias); 
void d_prune_aliases(struct inode *inode) 
EXPORT_SYMBOL(d_prune_aliases); 
static bool shrink_lock_dentry(struct dentry *dentry) 
static void shrink_dentry_list(struct list_head *list) 
static enum lru_status dentry_lru_isolate(struct list_head *item, struct list_lru_one *lru, spinlock_t *lru_lock, void *arg) 
long prune_dcache_sb(struct super_block *sb, struct shrink_control *sc) 
static enum lru_status dentry_lru_isolate_shrink(struct list_head *item, struct list_lru_one *lru, spinlock_t *lru_lock, void *arg) 
void shrink_dcache_sb(struct super_block *sb) 
EXPORT_SYMBOL(shrink_dcache_sb); 
enum d_walk_ret {
D_WALK_CONTINUE,D_WALK_QUIT,D_WALK_NORETRY,D_WALK_SKIP,};
static void d_walk(struct dentry *parent, void *data, enum d_walk_ret (*enter)(void *, struct dentry *)) 
struct check_mount {
struct vfsmount *mnt; 
unsigned int mounted; 
};
static enum d_walk_ret path_check_mount(void *data, struct dentry *dentry) 
int path_has_submounts(const struct path *parent) 
EXPORT_SYMBOL(path_has_submounts); 
int d_set_mounted(struct dentry *dentry) 
struct select_data {
struct dentry *start; 
struct list_head dispose; 
int found; 
};
static enum d_walk_ret select_collect(void *_data, struct dentry *dentry) 
void shrink_dcache_parent(struct dentry *parent) 
EXPORT_SYMBOL(shrink_dcache_parent); 
static enum d_walk_ret umount_check(void *_data, struct dentry *dentry) 
static void do_one_tree(struct dentry *dentry) 
void shrink_dcache_for_umount(struct super_block *sb) 
static enum d_walk_ret find_submount(void *_data, struct dentry *dentry) 
void d_invalidate(struct dentry *dentry) 
EXPORT_SYMBOL(d_invalidate); 
 struct dentry *__d_alloc(struct super_block *sb, const struct qstr *name) 
struct dentry *d_alloc(struct dentry * parent, const struct qstr *name) 
EXPORT_SYMBOL(d_alloc); 
struct dentry *d_alloc_anon(struct super_block *sb) 
EXPORT_SYMBOL(d_alloc_anon); 
struct dentry *d_alloc_cursor(struct dentry * parent) 
struct dentry *d_alloc_pseudo(struct super_block *sb, const struct qstr *name) 
EXPORT_SYMBOL(d_alloc_pseudo); 
struct dentry *d_alloc_name(struct dentry *parent, const char *name) 
EXPORT_SYMBOL(d_alloc_name); 
void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op) 
EXPORT_SYMBOL(d_set_d_op); 
void d_set_fallthru(struct dentry *dentry) 
EXPORT_SYMBOL(d_set_fallthru); 
static unsigned d_flags_for_inode(struct inode *inode) 
static void __d_instantiate(struct dentry *dentry, struct inode *inode) 
 void d_instantiate(struct dentry *entry, struct inode * inode) 
EXPORT_SYMBOL(d_instantiate); 
void d_instantiate_new(struct dentry *entry, struct inode *inode) 
EXPORT_SYMBOL(d_instantiate_new); 
int d_instantiate_no_diralias(struct dentry *entry, struct inode *inode) 
EXPORT_SYMBOL(d_instantiate_no_diralias); 
struct dentry *d_make_root(struct inode *root_inode) 
EXPORT_SYMBOL(d_make_root); 
static struct dentry *__d_instantiate_anon(struct dentry *dentry, struct inode *inode, bool disconnected) 
struct dentry *d_instantiate_anon(struct dentry *dentry, struct inode *inode) 
EXPORT_SYMBOL(d_instantiate_anon); 
static struct dentry *__d_obtain_alias(struct inode *inode, bool disconnected) 
struct dentry *d_obtain_alias(struct inode *inode) 
EXPORT_SYMBOL(d_obtain_alias); 
struct dentry *d_obtain_root(struct inode *inode) 
EXPORT_SYMBOL(d_obtain_root); 
struct dentry *d_add_ci(struct dentry *dentry, struct inode *inode, struct qstr *name) 
EXPORT_SYMBOL(d_add_ci); 
static inline bool d_same_name(const struct dentry *dentry, const struct dentry *parent, const struct qstr *name) 
struct dentry *__d_lookup_rcu(const struct dentry *parent, const struct qstr *name, unsigned *seqp) 
struct dentry *d_lookup(const struct dentry *parent, const struct qstr *name) 
EXPORT_SYMBOL(d_lookup); 
struct dentry *__d_lookup(const struct dentry *parent, const struct qstr *name) 
struct dentry *d_hash_and_lookup(struct dentry *dir, struct qstr *name) 
EXPORT_SYMBOL(d_hash_and_lookup); 
  void d_delete(struct dentry * dentry) 
EXPORT_SYMBOL(d_delete); 
static void __d_rehash(struct dentry *entry) 
 void d_rehash(struct dentry * entry) 
EXPORT_SYMBOL(d_rehash); 
static inline unsigned start_dir_add(struct inode *dir) 
static inline void end_dir_add(struct inode *dir, unsigned n) 
static void d_wait_lookup(struct dentry *dentry) 
struct dentry *d_alloc_parallel(struct dentry *parent, const struct qstr *name, wait_queue_head_t *wq) 
EXPORT_SYMBOL(d_alloc_parallel); 
void __d_lookup_done(struct dentry *dentry) 
EXPORT_SYMBOL(__d_lookup_done); 
static inline void __d_add(struct dentry *dentry, struct inode *inode) 
void d_add(struct dentry *entry, struct inode *inode) 
EXPORT_SYMBOL(d_add); 
struct dentry *d_exact_alias(struct dentry *entry, struct inode *inode) 
EXPORT_SYMBOL(d_exact_alias); 
void dentry_update_name_case(struct dentry *dentry, const struct qstr *name) 
EXPORT_SYMBOL(dentry_update_name_case); 
static void swap_names(struct dentry *dentry, struct dentry *target) 
static void copy_name(struct dentry *dentry, struct dentry *target) 
static void __d_move(struct dentry *dentry, struct dentry *target, bool exchange) 
void d_move(struct dentry *dentry, struct dentry *target) 
EXPORT_SYMBOL(d_move); 
void d_exchange(struct dentry *dentry1, struct dentry *dentry2) 
struct dentry *d_ancestor(struct dentry *p1, struct dentry *p2) 
static int __d_unalias(struct inode *inode, struct dentry *dentry, struct dentry *alias) 
struct dentry *d_splice_alias(struct inode *inode, struct dentry *dentry) 
EXPORT_SYMBOL(d_splice_alias); 
 bool is_subdir(struct dentry *new_dentry, struct dentry *old_dentry) 
EXPORT_SYMBOL(is_subdir); 
static enum d_walk_ret d_genocide_kill(void *data, struct dentry *dentry) 
void d_genocide(struct dentry *parent) 
EXPORT_SYMBOL(d_genocide); 
void d_tmpfile(struct dentry *dentry, struct inode *inode) 
EXPORT_SYMBOL(d_tmpfile); 
static __initdata unsigned long dhash_entries; 
static int __init set_dhash_entries(char *str) 
__setup("dhash_entries=", set_dhash_entries); 
static void __init dcache_init_early(void) 
static void __init dcache_init(void) 
struct kmem_cache *names_cachep __read_mostly; 
EXPORT_SYMBOL(names_cachep); 
void __init vfs_caches_init_early(void) 
void __init vfs_caches_init(void) 
