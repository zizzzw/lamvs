include/linux/string.h
include/linux/mm.h
include/linux/file.h
include/linux/fdtable.h
include/linux/fsnotify.h
include/linux/module.h
include/linux/tty.h
include/linux/namei.h
include/linux/backing-dev.h
include/linux/capability.h
include/linux/securebits.h
include/linux/security.h
include/linux/mount.h
include/linux/fcntl.h
include/linux/slab.h
include/linux/uaccess.h
include/linux/fs.h
include/linux/personality.h
include/linux/pagemap.h
include/linux/syscalls.h
include/linux/rcupdate.h
include/linux/audit.h
include/linux/falloc.h
include/linux/fs_struct.h
include/linux/ima.h
include/linux/dnotify.h
include/linux/compat.h
?/internal.h
int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs, struct file *filp) 
long vfs_truncate(const struct path *path, loff_t length) 
EXPORT_SYMBOL_GPL(vfs_truncate); 
long do_sys_truncate(const char __user *pathname, loff_t length) 
SYSCALL_DEFINE2(truncate, const char __user *, path, long, length) 
long do_sys_ftruncate(unsigned int fd, loff_t length, int small) 
SYSCALL_DEFINE2(ftruncate, unsigned int, fd, unsigned long, length) 
int vfs_fallocate(struct file *file, int mode, loff_t offset, loff_t len) 
EXPORT_SYMBOL_GPL(vfs_fallocate); 
int ksys_fallocate(int fd, int mode, loff_t offset, loff_t len) 
SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len) 
long do_faccessat(int dfd, const char __user *filename, int mode) 
SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode) 
SYSCALL_DEFINE2(access, const char __user *, filename, int, mode) 
int ksys_chdir(const char __user *filename) 
SYSCALL_DEFINE1(chdir, const char __user *, filename) 
SYSCALL_DEFINE1(fchdir, unsigned int, fd) 
int ksys_chroot(const char __user *filename) 
SYSCALL_DEFINE1(chroot, const char __user *, filename) 
static int chmod_common(const struct path *path, umode_t mode) 
int ksys_fchmod(unsigned int fd, umode_t mode) 
SYSCALL_DEFINE2(fchmod, unsigned int, fd, umode_t, mode) 
int do_fchmodat(int dfd, const char __user *filename, umode_t mode) 
SYSCALL_DEFINE3(fchmodat, int, dfd, const char __user *, filename, umode_t, mode) 
SYSCALL_DEFINE2(chmod, const char __user *, filename, umode_t, mode) 
static int chown_common(const struct path *path, uid_t user, gid_t group) 
int do_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag) 
SYSCALL_DEFINE5(fchownat, int, dfd, const char __user *, filename, uid_t, user, gid_t, group, int, flag) 
SYSCALL_DEFINE3(chown, const char __user *, filename, uid_t, user, gid_t, group) 
SYSCALL_DEFINE3(lchown, const char __user *, filename, uid_t, user, gid_t, group) 
int ksys_fchown(unsigned int fd, uid_t user, gid_t group) 
SYSCALL_DEFINE3(fchown, unsigned int, fd, uid_t, user, gid_t, group) 
int open_check_o_direct(struct file *f) 
static int do_dentry_open(struct file *f, struct inode *inode, int (*open)(struct inode *, struct file *), const struct cred *cred) 
int finish_open(struct file *file, struct dentry *dentry, int (*open)(struct inode *, struct file *), int *opened) 
EXPORT_SYMBOL(finish_open); 
int finish_no_open(struct file *file, struct dentry *dentry) 
EXPORT_SYMBOL(finish_no_open); 
char *file_path(struct file *filp, char *buf, int buflen) 
EXPORT_SYMBOL(file_path); 
int vfs_open(const struct path *path, struct file *file, const struct cred *cred) 
struct file *dentry_open(const struct path *path, int flags, const struct cred *cred) 
EXPORT_SYMBOL(dentry_open); 
static inline int build_open_flags(int flags, umode_t mode, struct open_flags *op) 
struct file *file_open_name(struct filename *name, int flags, umode_t mode) 
struct file *filp_open(const char *filename, int flags, umode_t mode) 
EXPORT_SYMBOL(filp_open); 
struct file *file_open_root(struct dentry *dentry, struct vfsmount *mnt, const char *filename, int flags, umode_t mode) 
EXPORT_SYMBOL(file_open_root); 
struct file *filp_clone_open(struct file *oldfile) 
EXPORT_SYMBOL(filp_clone_open); 
long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode) 
SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode) 
SYSCALL_DEFINE4(openat, int, dfd, const char __user *, filename, int, flags, umode_t, mode) 
int filp_close(struct file *filp, fl_owner_t id) 
EXPORT_SYMBOL(filp_close); 
SYSCALL_DEFINE1(close, unsigned int, fd) 
SYSCALL_DEFINE0(vhangup) 
int generic_file_open(struct inode * inode, struct file * filp) 
EXPORT_SYMBOL(generic_file_open); 
int nonseekable_open(struct inode *inode, struct file *filp) 
EXPORT_SYMBOL(nonseekable_open); 
